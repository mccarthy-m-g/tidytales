---
title: palettes 0.2.0, now in print
description: |
  I am proud to announce that version 0.2.0 of the palettes package is now on
  CRAN. This version introduces new printing features, plus some other small
  improvements.
  
author:
  - name: Michael McCarthy
    url: https://michaelmccarthy.tidytales.ca

date: '2024-02-05'

categories:
  - .Visualize
  - "{palettes}"

image: images/logo.png

twitter-card:
  title: "Tidy Tales: palettes 0.2.0, now in print"
  image: images/card.png
  image-width: 1200
  image-height: 628
  card-style: summary_large_image

open-graph:
  title: "Tidy Tales: palettes 0.2.0, now in print"
  image: images/card.png
  
resources: images/card.png

params:
  use_renv: FALSE
  data_file: NULL
  fair_dealing: FALSE
  
df-print: default
---

<!-- Quarto does not support ANSI colour output through downlit at the time this post was written, but fansi knitr hooks can be used to make it work. -->

```{r fansi}
#| comment: ''
#| results: asis
#| echo: false
old_hook <- fansi::set_knit_hooks(knitr::knit_hooks, which = c("output", "warning", "error", "message"))
options(crayon.enabled = TRUE, cli.num_colors = 256)
```

## Overview

I am proud to announce that version 0.2.0 of the [palettes package](https://mccarthy-m-g.github.io/palettes/index.html) is now on [CRAN](https://cran.r-project.org/package=palettes). You can install it with:

```r
install.packages("palettes")
```

palettes is an R package that makes working with colour vectors and colour palettes easy and fun. Here's what's new in version 0.2.0:

- New printing options! 

- The [package website](https://mccarthy-m-g.github.io/palettes/index.html) site has gotten a [new article](https://mccarthy-m-g.github.io/palettes/articles/made-with-palettes.html) showcasing colour palette packages *made with palettes*&#8482; by the community.

- The [GitHub repository](https://github.com/mccarthy-m-g/palettes) and [package website](https://mccarthy-m-g.github.io/palettes/index.html) now have instructions for installing both the release and development versions in [WebR](https://docs.r-wasm.org/webr/latest/) applications.

- Error messages now use [cli pluralization](https://cli.r-lib.org/articles/pluralization.html), thanks to a pull request from [\@olivroy](https://github.com/olivroy).

- Minor improvements to documentation throughout the package.

If this is your first time hearing about palettes, the package website is the best place to learn more: <https://mccarthy-m-g.github.io/palettes/index.html>

## Printing, however you like

```{r}
library(palettes)
```

The main purpose of version 0.2.0 was to add a variety of global options to adjust the printing behaviour of colour vectors and palettes. See `help("palettes-options", package = "palettes)` for a list of all the available options and their default values. I'm very happy with how this turned out, and am excited to hear what you think about these new features!

By default, colour vectors and colour palettes print like this:

```{r}
met_palettes$Archambault
```

This looks nice, but due to the font choice on tidytales the colour preview symbols are a bit too small (whereas in RStudio they're a nice size). This brings us to the first and flashiest new option---you can now change the symbol used for colour previews with the `palettes.print_symbol` option:

::: {.column-margin}
If you look at the source code for my [first post about palettes](/posts/2022-12-20_palettes), you can see that I actually ended up using JavaScript to change the font for symbols so they would look better. Needless to say, that was an annoying solution.
:::

```{r}
options(palettes.print_symbol = "block")
met_palettes$Archambault
```

A list of all the available symbols and their names can be printed with `list_colour_symbols()`:

```{r}
#| echo: false
# Disable colouring for the symbol list.
do.call(knitr::knit_hooks$set, old_hook)
options(crayon.enabled = FALSE, cli.num_colors = 0)
```

```{r}
list_colour_symbols()
```

```{r}
#| comment: ''
#| results: asis
#| echo: false
# Bring back colouring for the rest of the post.
old_hook <- fansi::set_knit_hooks(knitr::knit_hooks, which = c("output", "warning", "error", "message"))
options(crayon.enabled = TRUE, cli.num_colors = 256)
```

Five other options are available:

- `palettes.print_hex`: Logical setting whether to print hex codes in colour previews.
- `palettes.print_alpha`: Logical setting whether to print the hex code alpha channel in colour previews.
- `palettes.print_sep`: Character string to separate colours by in colour previews.
- `palettes.print_width`: Integer setting the maximum number of colours on a line in colour previews.
- `palettes.print_index`: Logical setting whether to print the index of the first colour on each line in colour previews.

You can set multiple options together for unique printing styles. Once you find a configuration you like, you can add it to your [`.Rprofile`](https://rstats.wtf/r-startup.html#rprofile) dotfile to have it persist across R sessions on a global or per-project basis. Here are two examples I thought looked nice:
    
```{r}
# Print colour vectors compactly.
options(
  palettes.print_symbol = "circle_large",
  palettes.print_hex = FALSE,
  palettes.print_width = 5
)
met_palettes$Archambault

# Mimic the appearance of a character vector.
options(
  palettes.print_symbol = FALSE,
  palettes.print_hex = TRUE,
  palettes.print_sep = ", ",
  palettes.print_width = 10,
  palettes.print_index = TRUE
)
met_palettes$Archambault
```

Feel free to share your own configurations down below in the comments!

## Community articles

One of the main goals of palettes is to make it easy for anyone to [make their own colour palette package](https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html). I'm happy to report that palettes seems to be achieving this goal. Here's a testimonial from [Howard Baek](https://github.com/howardbaek), creator of the [**hutchplot**](https://github.com/fhdsl/hutchplot) package, which provides colour palettes and logos for the Fred Hutchinson Cancer Center:

> The creation of hutchplot was a straightforward process that involved following the step-by-step instructions outlined in the ["Creating a colour palette package"](https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html) vignette provided by the palettes R package.

To celebrate this, I've added a Community section to the package website, with a [new article](https://mccarthy-m-g.github.io/palettes/articles/made-with-palettes.html) showcasing colour palette packages made by the community---including hutchplot, and the [**warwickplots**](https://github.com/Warwick-Stats-Resources/warwickplots) package by [Ella Kaye](https://github.com/EllaKaye). If you ever make a colour palette package with palettes in the future, please [let me know](https://github.com/mccarthy-m-g/palettes/tree/main/data-raw) if youâ€™d like it added to the showcase.

::: {.column-margin}
If you're curious how I made the listing table of packages for the showcase, I'm using the **gh** and **desc** packages to get and read each package's `DESCRIPTION` file from their GitHub repository, then using the **gt** and **fontawesome** packages for the table---with some additional CSS code to make it responsive for smaller screens.
:::

::: {.callout-note}
## The benefits of making a colour palette package with palettes

As I explained in my [first post about palettes](/posts/2022-12-20_palettes), the current approach most people use when making a colour palette package is to copy the source code from other colour palette packages, then apply revisions to that code for their own package. That's a lot of duplicated effort for something as simple as shipping a set of hex colour codes in an R package, and it can also lead to feature disparities between different colour palette packages.

But palettes provides a better way: Colour palette packages made with palettes exist solely for the purpose of distributing colour palettes and get access to all the features of palettes for free. What this means for the hutchplot and warwickplots packages is that (1) Howard and Ella can simply inform their users of the new version of palettes---they don't need to update any code in hutchplot or warwickplots; and (2) the only thing users of hutchplot and warwickplots need to do to begin using the new printing features is update palettes.
:::

## WebR

WebR? WebR! Like most people, I'm stoked about the [WebR](https://docs.r-wasm.org/webr/latest/) project, which makes it possible to run R code in the browser without the need for an R server to execute the code. If you've been following the project, you are likely also aware of two recent advancements that make the wizardry that is WebR available to mere mortals like me:

- The R for WebAssembly (r-wasm) project now builds WebAssembly binaries for most CRAN packages ([article](https://www.tidyverse.org/blog/2023/08/webr-0-2-0/), [Shiny app](https://repo.r-wasm.org/))
- R-universe now builds WebAssembly binaries for all R-universe packages ([article](https://ropensci.org/blog/2023/11/17/runiverse-wasm/))

Which means you can now install the release or development version of palettes for use in [WebR](https://docs.r-wasm.org/webr/latest/) applications with:

```r
# Install CRAN version from r-wasm
install.packages("palettes", repos = "https://repo.r-wasm.org")

# Install development version from R-universe
install.packages(
  "palettes",
  repos = c("https://mccarthy-m-g.r-universe.dev", "https://repo.r-wasm.org")
)
```

You can try this out for yourself in the [WebR REPL app](https://webr.r-wasm.org/latest/). Here's a screenshot to show it working:

![palettes working in the WebR REPL app](images/webr.png){width=100%}

How sweet is that? Huge thank you to [George Stagg](https://github.com/georgestagg) and [Jeroen Ooms](https://github.com/jeroen) for making this possible!

## What's next?

palettes now has [over 3600](https://cranlogs.r-pkg.org/badges/grand-total/palettes) known downloads---it's exciting to see the userbase grow, so thank you to everyone who's given it a try! In future versions I would like to:

- Add functions for manipulating colour palettes
- Add an interpolation function for bivariate colour scales

If you have other suggestions, requests, or would like to contribute, please [file an issue on GitHub](https://github.com/mccarthy-m-g/palettes/issues).

```{r}
#| echo: false
do.call(knitr::knit_hooks$set, old_hook)
options(crayon.enabled = FALSE, cli.num_colors = 0)
```

{{< include /_common/_appendix.qmd >}}
