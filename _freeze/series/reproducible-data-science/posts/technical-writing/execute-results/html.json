{
  "hash": "527370d0925fb81dc533956c572f1f71",
  "result": {
    "markdown": "---\ntitle: Technical Writing\ndescription: Technical writing and literate programming in Quarto documents.\nimage: images/technical-writing.png\n\norder: 100\n---\n\n\n## Literate programming\n\n**Literate programming** is the practice of mixing text and executable code in the same document, making it possible to write reproducible documents. There are four engines for executing code in Quarto documents:\n\n- [knitr](https://github.com/yihui/knitr) (supports R, Python, Julia, and more)\n- [jupyter](https://jupyter.org) (Python only)\n- [IJulia](https://github.com/JuliaLang/IJulia.jl) (Julia only)\n- [Observable JS](https://observablehq.com/) (Observable JS only)\n\nAll engines support executing code in **code blocks** within a document, which can be used to execute code and include its output in a document. Code blocks can produce a wide variety of outputs, including plots, tabular output from data frames, and plain text. The behaviour of code execution and output can be set with Quarto's [Execution Options](https://quarto.org/docs/computations/execution-options.html).\n\nknitr, jupyter, and Observable JS also support executing **inline code** within markdown text, which can be used to allow narrative to automatically use the most up to date computations. The syntax for inline code varies across the engines.\n\nThe remainder of this post covers some useful literate programming practices when writing reproducible documents with the knitr engine.\n\n::: {.callout-note}\n## Project management\n\nLiterate programming is a powerful tool for writing reproducible documents, but it can also become unwieldy if your computations require a lot of code. Rather than writing all the code within a document, it is often better to source the required code within a document, then include output using the objects created by the sourced code. The simplest way to adopt this approach is by using the `source()` function to source R script files containing the computations for a document; a better way is to use the [literate programming](https://books.ropensci.org/targets/literate-programming.html) approach described in the **targets** R package.\n:::\n\n## Plain text outputs\n\nMost code you write will be output as plain text. Depending on the purpose of a document, it might be fine to leave that output as is, or you might want to format the text, include it inline, and so forth.\n\nFor example, say you wanted to report the number of participants in a study you ran. Rather than writing a sentence like this:\n\n> There were twelve participants in the study.\n\nYou could get the number of participants computationally, format that number into the word \"twelve\", and include it in the sentence using inline code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_participants <- xfun::numbers_to_words(12)\n```\n:::\n\n\n> There were `` `r n_participants` `` participants in the study.\n\nThis sentence would become \"There were twelve participants in the study.\" when you render the document. Likewise, if the number of participants changed, the number reported in the sentence would change the next time the document rendered (as long as the R object storing the number of participants knew about the change).\n\nIf there are many values you need to report inline, storing them in a list is a good practice. For an overview of this approach, see:\n\n- [Lists are my secret weapon for reporting stats with knitr](https://www.tjmahr.com/lists-knitr-secret-weapon/) by Tristan Mahr\n\n## Figure and table outputs\n\nFigures and tables produced by code blocks have unique parameters you can use to adjust their layout, add captions, or make them cross-referenceable. See the Quarto documentation for details:\n\n- [Figures documentation](https://quarto.org/docs/authoring/figures.html)\n- [Tables documentation](https://quarto.org/docs/authoring/tables.html)\n\n::: {.callout-tip}\n## Adjusting figure appearance\n\nWhen making figures with **ggplot2** it's best to know the final size of the figure before attempting to adjust the size of plot text or geometry.\n:::\n\n## Equations\n\nQuarto features [extensive support](https://quarto.org/docs/authoring/markdown-basics.html#equations) for writing beautiful math equations with [LaTeX math](https://en.wikibooks.org/wiki/LaTeX/Mathematics) expressions authored using [standard Pandoc markdown syntax](https://pandoc.org/MANUAL.html#math): Use `$` delimiters for inline math and `$$` delimiters for display math. Provide an `#eq-` label immediately after a display math equation to [make it referenceable](https://quarto.org/docs/authoring/cross-references.html#equations).\n\n+----------------------------------+--------------------------------+\n| Markdown Syntax                  | Output                         |\n+==================================+================================+\n| inline math: `$E = mc^{2}$`      | inline math: $E=mc^{2}$        |\n+----------------------------------+--------------------------------+\n| display math:                    | display math:\\                 |\n|                                  | $$E = mc^{2}$$                 |\n| `$$E = mc^{2}$$`                 |                                |\n+----------------------------------+--------------------------------+\n| display math with label:         | display math with label:\\      |\n|                                  | $$E = mc^{2}$${#eq-mc-squared} |\n| `$$E = mc^{2}$${#eq-mc-squared}` |                                |\n+----------------------------------+--------------------------------+\n\nMath expressions can be rendered in any of Quarto's output formats, but different rendering methods are used depending on the format:\n\n- `html` offers [several math rendering methods](https://quarto.org/docs/output-formats/html-basics.html#latex-equations)\n- `pdf` uses LaTeX (including [raw LaTeX](https://quarto.org/docs/output-formats/pdf-basics.html#raw-latex))\n- `docx` uses Microsoft Word's equation environment\n\nTo learn more about writing LaTeX math expressions, see:\n\n- [MathJax basic tutorial and quick reference](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)[^1]\n- [Cheatsheet for LaTeX Math Commands](https://tilburgsciencehub.com/building-blocks/collaborate-and-share-your-work/write-your-paper/amsmath-latex-cheatsheet/)\n\n[^1]: [MathJax](https://www.mathjax.org) is an open-source JavaScript rendering engine for LaTeX math expressions. It is the default rendering method in Quarto HTML documents.\n\n::: {.callout-note}\n## Inspecting equations rendered by MathJax\n\nEquations rendered by MathJax can be inspected by right clicking them. This is useful if you want to view or copy the underlying TeX code from an equation **Show Math As > TeX Commands** or **Copy to Clipboard > TeX Commands**. Note that Tidy Tales uses the KaTeX renderer, so it won't work on this site.\n:::\n\n### Using inline R code in math equations\n\nInline R code `` `r ` `` can be used within inline or display math to include code output in math equations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_fit <- lm(mpg ~ am, data = mtcars)\ncoef_int   <- coef(mtcars_fit)[\"(Intercept)\"]\ncoef_am    <- coef(mtcars_fit)[\"am\"]\n```\n:::\n\n\nInline math: ``` $\\mathrm{\\widehat{mpg}} = `r coef_int` + `r coef_am`(\\mathrm{am})$ ```\n\nInline math: $\\mathrm{\\widehat{mpg}} = 17.1473684 + 7.2449393(\\mathrm{am})$\n\nThe same approach also works for display math.\n\n::: {.callout-tip}\n## Writing model equations\n\nThe **equatiomatic** package can be used to write equations from a fitted model. Learn more on the [package website](https://datalorax.github.io/equatiomatic/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(equatiomatic)\n```\n:::\n\n\nBy default the model equation uses math symbols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_eq(mtcars_fit)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> $$\n#> \\operatorname{mpg} = \\alpha + \\beta_{1}(\\operatorname{am}) + \\epsilon\n#> $$\n```\n:::\n:::\n\n\nBut model estimates can be used too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_eq(mtcars_fit, use_coefs = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> $$\n#> \\operatorname{\\widehat{mpg}} = 17.15 + 7.24(\\operatorname{am})\n#> $$\n```\n:::\n:::\n\n\n:::\n\n### Using math equations in plots\n\nBoth base R and **ggplot2** plots feature support for writing beautiful math equations with [plotmath expressions](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html). Equations can be used in plot labels, legends, and text.\n\nIf you would rather write equations using LaTeX math expressions, the **latex2exp** package can be used to parse and convert LaTeX to plotmath expressions. Learn more on the [package website](https://www.stefanom.io/latex2exp/).\n\nggplot2 also includes some convenience functions for using plotmath in plot labels:\n\n- `label_parsed()` interprets labels as plotmath expressions\n- `label_bquote()` offers a flexible way of labelling facet rows or columns with plotmath expressions\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}