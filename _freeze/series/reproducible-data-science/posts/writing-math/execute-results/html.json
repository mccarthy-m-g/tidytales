{
  "hash": "cb8a4bcda6d22f01d73526c15a7943bf",
  "result": {
    "markdown": "---\ntitle: Writing Math\ndescription: Writing math equations in Quarto documents.\n\norder: 100\n---\n\n\n## Math equations in Quarto\n\nQuarto features [extensive support](https://quarto.org/docs/authoring/markdown-basics.html#equations) for writing beautiful math equations with [LaTeX math](https://en.wikibooks.org/wiki/LaTeX/Mathematics) expressions authored using [standard Pandoc markdown syntax](https://pandoc.org/MANUAL.html#math): Use `$` delimiters for inline math and `$$` delimiters for display math. Provide an `#eq-` label immediately after a display math equation to [make it referenceable](https://quarto.org/docs/authoring/cross-references.html#equations).\n\n+----------------------------------+--------------------------------+\n| Markdown Syntax                  | Output                         |\n+==================================+================================+\n| inline math: `$E = mc^{2}$`      | inline math: $E=mc^{2}$        |\n+----------------------------------+--------------------------------+\n| display math:                    | display math:\\                 |\n|                                  | $$E = mc^{2}$$                 |\n| `$$E = mc^{2}$$`                 |                                |\n+----------------------------------+--------------------------------+\n| display math with label:         | display math with label:\\      |\n|                                  | $$E = mc^{2}$${#eq-mc-squared} |\n| `$$E = mc^{2}$${#eq-mc-squared}` |                                |\n+----------------------------------+--------------------------------+\n\nMath expressions can be rendered in any of Quarto's output formats, but different rendering methods are used depending on the format:\n\n- `html` offers [several math rendering methods](https://quarto.org/docs/output-formats/html-basics.html#latex-equations)\n- `pdf` uses LaTeX (including [raw LaTeX](https://quarto.org/docs/output-formats/pdf-basics.html#raw-latex))\n- `docx` uses Microsoft Word's equation environment\n\nTo learn more about writing LaTeX math expressions, see:\n\n- [MathJax basic tutorial and quick reference](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)[^1]\n- [Cheatsheet for LaTeX Math Commands](https://tilburgsciencehub.com/building-blocks/collaborate-and-share-your-work/write-your-paper/amsmath-latex-cheatsheet/)\n\n[^1]: [MathJax](https://www.mathjax.org) is an open-source JavaScript rendering engine for LaTeX math expressions. It is the default rendering method in Quarto HTML documents.\n\n::: {.callout-note}\n## Inspecting equations rendered by MathJax\n\nEquations rendered by MathJax can be inspected by right clicking them. This is useful if you want to view or copy the underlying TeX code from an equation **Show Math As > TeX Commands** or **Copy to Clipboard > TeX Commands**. Note that Tidy Tales uses the KaTeX renderer, so it won't work on this site.\n:::\n\n## Using inline R code in math equations\n\nInline R code `` `r ` `` can be used within inline or display math to include code output in math equations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_fit <- lm(mpg ~ am, data = mtcars)\ncoef_int   <- coef(mtcars_fit)[\"(Intercept)\"]\ncoef_am    <- coef(mtcars_fit)[\"am\"]\n```\n:::\n\n\nInline math: ``` $\\mathrm{\\widehat{mpg}} = `r coef_int` + `r coef_am`(\\mathrm{am})$ ```\n\nInline math: $\\mathrm{\\widehat{mpg}} = 17.1473684 + 7.2449393(\\mathrm{am})$\n\nThe same approach also works for display math.\n\n::: {.callout-tip}\n## Writing model equations\n\nThe **equatiomatic** package can be used to write equations from a fitted model. Learn more on the [package website](https://datalorax.github.io/equatiomatic/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(equatiomatic)\n```\n:::\n\n\nBy default the model equation uses math symbols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_eq(mtcars_fit)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> $$\n#> \\operatorname{mpg} = \\alpha + \\beta_{1}(\\operatorname{am}) + \\epsilon\n#> $$\n```\n:::\n:::\n\n\nBut model estimates can be used too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_eq(mtcars_fit, use_coefs = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> $$\n#> \\operatorname{\\widehat{mpg}} = 17.15 + 7.24(\\operatorname{am})\n#> $$\n```\n:::\n:::\n\n\n:::\n\n## Using math equations in plots\n\nBoth base R and **ggplot2** plots feature support for writing beautiful math equations with [plotmath expressions](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html). Equations can be used in plot labels, legends, and text.\n\nIf you would rather write equations using LaTeX math expressions, the **latex2exp** package can be used to parse and convert LaTeX to plotmath expressions. Learn more on the [package website](https://www.stefanom.io/latex2exp/).\n\nggplot2 also includes some convenience functions for using plotmath in plot labels:\n\n- `label_parsed()` interprets labels as plotmath expressions\n- `label_bquote()` offers a flexible way of labelling facet rows or columns with plotmath expressions\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}