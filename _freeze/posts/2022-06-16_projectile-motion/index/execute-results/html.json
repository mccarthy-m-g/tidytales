{
  "hash": "f238fcc110771d4fd10af1eeeae5b767",
  "result": {
    "markdown": "---\ntitle: On motion\ndescription: |\n  Simulating projectile motion with {gganimate}.\n\nauthor:\n  - name: Michael McCarthy\n    url: https://michaelmccarthy.tidytales.ca\n    affiliation: Outer Wilds Ventures\n\ndate: '2022-06-16'\n\ncategories:\n  - .Simulate\n  - .Visualize\n  - \"{tidyverse}\"\n  - \"{ggplot2}\"\n  - \"{gganimate}\"\n  - \"{ggh4x}\"\n  - \"{emojifont}\"\n\nimage: images/featured.png\n\ntwitter-card:\n  title: \"Tidy Tales: On motion\"\n  image: images/twittercard.png\n  image-width: 1200\n  image-height: 628\n  card-style: summary_large_image\n  \nopen-graph:\n  title: \"Tidy Tales: On motion\"\n  image: images/twittercard.png\n\nbibliography: sources.bib\nnocite: | \n  @omni_projectile_nodate, @lumen_projectile_nodate, @khan_projectile_nodate\n\nresources:\n  - \"images/twittercard.png\"\n  - \"images/moon-gravity.mp4\"\n  - \"images/simple-trajectory.mp4\"\n  - \"images/planets-trajectory.mp4\"\n\ninclude-after-body: \"../../_common/mp4-img-fallback.html\"\n\nparams:\n  use_renv: FALSE\n  data_file: NULL\n  fair_dealing: FALSE\n---\n\n\n\n\n## Overview\n\nProjectile motion describes the motion of an object launched into the air whose trajectory after launch is influenced only by the force of gravity and for which air resistance is negligible. Projectile motion was first accurately described by Galileo Galilei in his book [Two New Sciences](https://en.wikipedia.org/wiki/Two_New_Sciences), published in 1638. In what he dubbed *compound motion*, Galileo demonstrated that projectile motion can be broken down into independent horizontal and vertical components that can be analyzed separately to describe an object's trajectory. He used this principle to prove that the trajectory of an object in projectile motion will always follow a curve in the shape of a parabola.\n\n\n::: {.cell opts.label='fig.graphic'}\n::: {.cell-output-display}\n![Projectile motion of an object launched at the same height and velocity but different angles. The symmetrical U-shaped curve of each trajectory is known as a parabola.\n](index_files/figure-html/parabola-1.png){width=100%}\n:::\n:::\n\n\nGalileo used an inclined plane to demonstrate his principle of compound motion. I'm going to use R.\n\n## Post Inspiration\n\nI recently finished Outer Wilds, an open world adventure game set in a strange, constantly evolving solar system trapped in an endless time loop. It's a great game and I really enjoyed solving the mysteries of the solar system. The reason I bring it up here is that, on top of being a great game, the physics realism of Outer Wilds is something that really stood out to me.\n\nFor instance, at the start of the game there’s a museum exhibit consisting of a low table and three gently rolling balls that appear to move around on their own.\n\n::: {.column-margin}\nEmphasis on *gently*. Wait for it...\n:::\n\n<img src='images/moon-gravity.mp4' width =\"100%\">\n\nBut the balls are not actually moving on their own. Their motion is being affected by the moon's gravity. As the placard beside them explains: “As it orbits our planet, the Attlerock’s gravity pulls on objects from different directions. In fact, it’s pulling on you right now!” This isn't just flavour text---the game is [actually simulating planetary gravity](https://www.rockpapershotgun.com/how-outer-wilds-built-a-planet-which-falls-apart).\n\nOuter Wilds uses its physics realism to great effect in other parts of the game (ever wondered what it's like to stand on planet while it breaks apart into a black hole?), and experiencing it all got me curious: What kinds of physics simulations could I do in the two-dimensional space of a plot? After some research and reading I landed on projectile motion.\n\n## Prerequisites\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(ggh4x)\nlibrary(formattable)\nlibrary(emojifont)\nlibrary(glue)\n```\n:::\n\n\nI'll be simulating data for my plot by turning the equations for projectile motion into R functions. You can [download this data](#data-source) with the Data Source link in the appendix. The [sources](#references) I used for the equations can also be found in the appendix.\n\n## Simulate\n\nThe equations for projectile motion use a common set of variables which are listed below. The equations assume that the force of air resistance is negligible \n\n$$\n\\begin{align*}\nV &\\leftarrow \\textrm{initial velocity}, \\\\\nV_x &\\leftarrow \\textrm{horizontal velocity}, \\\\\nV_y &\\leftarrow \\textrm{vertical velocity}, \\\\\n\\alpha &\\leftarrow \\textrm{launch angle}, \\\\\nh &\\leftarrow \\textrm{initial height}, \\\\\nt &\\leftarrow \\textrm{time of flight}, \\\\\nd &\\leftarrow \\textrm{distance (range)}, \\\\\nh_{\\textrm{max}} &\\leftarrow \\textrm{maximum height}, \\\\\ng &\\leftarrow \\textrm{gravity}.\n\\end{align*}\n$$\n\n### Horizontal and vertical velocity\n\nThe horizontal velocity, $V_x$, and vertical velocity, $V_y$, of an object moving in projectile motion are given by the equations\n\n$$\n\\begin{align*}\nV_x &= V \\times \\cos(\\alpha), \\textrm{ and} \\\\\nV_y &= V \\times \\sin(\\alpha),\n\\end{align*}\n$$\n\nwhere $V$ is the initial velocity and $\\alpha$ is the launch angle. Horizontal and vertical velocity can be computed in R with the following functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvelocity_x <- function(velocity, angle) {\n  # Degrees need to be converted to radians in cos() since that is what the\n  # function uses\n  velocity * cos(angle * (pi/180))\n}\n\nvelocity_y <- function(velocity, angle) {\n  # Degrees need to be converted to radians in sin() since that is what the\n  # function uses\n  velocity * sin(angle * (pi/180))\n}\n```\n:::\n\n\n### Time of flight\n\nThe time of flight, $t$, of an object moving in projectile motion is given by the equation\n\n$$\nt = \\left(V_y + \\sqrt{V_y^2 + 2 \\times g \\times h}\\right) \\div g,\n$$\n\nwhere $V_y$ is the vertical velocity, $g$ is the force of gravity, and $h$, is the initial height the object is launched from. Time of flight is the time from when the object is launched to the time the object reaches the surface. It can be computed in R with the following function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflight_time <- function(velocity_y, height, gravity = 9.80665) {\n  ( velocity_y + sqrt(velocity_y^2 + 2 * gravity * height) ) / gravity\n}\n```\n:::\n\n\n### Distance (range)\n\nThe distance, $d$, or range travelled by an object moving in projectile motion is given by the equation\n\n$$\nd = V_x \\times t,\n$$\n\nwhere $V_x$ is the horizontal velocity and $t$ is the time of flight. The range of the projectile is the total horizontal distance travelled during the time of flight. It can be computed in R with the following function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance <- function(velocity_x, velocity_y, height, gravity = 9.80665) {\n  velocity_x * ( velocity_y + sqrt(velocity_y^2 + 2 * gravity * height) ) /\n  gravity\n}\n```\n:::\n\n\n### Maximum height\n\nThe maximum height, $h_{\\textrm{max}}$, reached by an object moving in projectile motion is given by the equation\n\n$$\nh_{\\textrm{max}} = h + V_y^2 \\div (2 \\times g),\n$$\n\nwhere $h$ is the initial height, $V_y$ is the vertical velocity, and $g$ is the force of gravity. The maximum height is reached when $V_y = 0$. It can be computed in R with the following function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_max <- function(velocity_y, height, gravity = 9.80665) {\n  height + velocity_y^2 / (2 * gravity)\n}\n```\n:::\n\n\n### Projectile motion calculator\n\nNow to wrap all the components into a single function that will calculate the result for each component based on a set of parameters given to it. These results can then be used to determine the position and velocity of the projectile at any point in time during its trajectory, which I want to return as a data frame that can be used for plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' nframes and fps can be used to animate the trajectory as close to real time as possible.\n#' There will be some rounding error though so it won't be exactly the same as the flight\n#' time.\nprojectile_motion <- function(velocity, angle, height, gravity = 9.80665, nframes = 30) {\n  \n  # Velocity components\n  vx <- velocity_x(velocity, angle)\n  vy <- velocity_y(velocity, angle)\n  # Flight components\n  t  <- flight_time(vy, height, gravity)\n  d  <- distance(vx, vy, height, gravity)\n  # Max height components\n  hm <- height_max(vy, height, gravity)\n  th <- vy / gravity\n  hd <- vx * th\n  \n  # Calculate the position of the projectile in 2D space at a given point in\n  # time to approximate its trajectory over time\n  x_pos <- map_dbl(seq(0, t, length = nframes), ~ {\n    vx * .x\n  })\n  \n  y_pos <- map_dbl(seq(0, t, length = nframes), ~ {\n    height + ( vy * .x + 0.5 * -gravity * .x^2 )\n  })\n  \n  # Calculate the vertical velocity of the projectile at a given point in time\n  vy_t  <- map_dbl(seq(0, t, length = nframes), ~ {\n    vy - gravity * .x\n  })\n  \n  trajectory <- data.frame(\n    x = x_pos,\n    y = y_pos,\n    vx = vx,\n    vy = vy_t,\n    second = seq(0, t, length = nframes)\n  )\n  \n  # Return a list with all calculated values\n  list(\n    velocity_x = vx,\n    velocity_y = vy,\n    flight_time = t,\n    distance = d,\n    max_height = hm,\n    max_height_time = th,\n    max_height_dist = hd,\n    trajectory = trajectory,\n    nframes = nframes,\n    fps = nframes/t\n  )\n  \n}\n```\n:::\n\n\n## Wrangle\n\nInstead of jumping straight into a visualization, I want to play around with the output of `projectile_motion()`. First to show what its output looks like, and second to explore the interesting ways it can be extended through wrangling.\n\n### A simple trajectory\n\nFirst off, demonstrating `projectile_motion()` and its output. The function takes five arguments:\n\n- `velocity` in metres per second,\n- `angle` in degrees,\n- `height` in metres per second,\n- `gravity` in metres per second (this defaults to Earth's gravity, 9.80665 m/s), and\n- `nframes` which represents how many points in time to record in the trajectory data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectile_motion(\n  velocity = 11.4,\n  angle = 52.1,\n  height = 18,\n  nframes = 10\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $velocity_x\n#> [1] 7.002851\n#> \n#> $velocity_y\n#> [1] 8.995559\n#> \n#> $flight_time\n#> [1] 3.041533\n#> \n#> $distance\n#> [1] 21.29941\n#> \n#> $max_height\n#> [1] 22.12578\n#> \n#> $max_height_time\n#> [1] 0.9172917\n#> \n#> $max_height_dist\n#> [1] 6.423657\n#> \n#> $trajectory\n#>            x            y       vx          vy    second\n#> 1   0.000000 1.800000e+01 7.002851   8.9955586 0.0000000\n#> 2   2.366601 2.048003e+01 7.002851   5.6814194 0.3379481\n#> 3   4.733201 2.184005e+01 7.002851   2.3672802 0.6758963\n#> 4   7.099802 2.208006e+01 7.002851  -0.9468589 1.0138444\n#> 5   9.466402 2.120007e+01 7.002851  -4.2609981 1.3517926\n#> 6  11.833003 1.920007e+01 7.002851  -7.5751373 1.6897407\n#> 7  14.199604 1.608006e+01 7.002851 -10.8892765 2.0276889\n#> 8  16.566204 1.184005e+01 7.002851 -14.2034156 2.3656370\n#> 9  18.932805 6.480029e+00 7.002851 -17.5175548 2.7035852\n#> 10 21.299405 3.552714e-15 7.002851 -20.8316940 3.0415333\n#> \n#> $nframes\n#> [1] 10\n#> \n#> $fps\n#> [1] 3.287815\n```\n:::\n:::\n\n\nThe function returns calculations for each of the projectile motion equations I covered above, as well as some additional output that can be used for plotting and animation:\n\n- `max_height_time` and `max_height_dist` give the time (s) and distance (m) it takes for the projectile to reach its maximum height.\n- `trajectory` gives the horizontal and vertical position and velocity at a given moment during the projectile's trajectory.\n- `fps` gives the number of frames per second that are needed to animate the trajectory in real time based on `nframes`. Because it is impossible to have a fraction of a frame there will be variance in how closely an animation's duration matches the actual time of flight based on the value of `nframes`.\n\n### Launching a projectile on different planets\n\nGiven the inspiration for this post, a space themed simulation seems appropriate. Here I want to test how the gravity of each planet in our solar system influences projectile motion, given a projectile is launched with the same velocity, angle, and height.\n\nFirst I need to construct a named vector of the [gravity of each planet](https://nssdc.gsfc.nasa.gov/planetary/factsheet/planet_table_ratio.html) in our solar system. NASA provides these values came as ratios of each planet's gravity relative to Earth, so I had to multiply each one by Earth's gravity to get the units correct.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# All values are in metres per second\nplanets <- c(\n  mercury = 3.7069137,\n  venus   = 8.8946315,\n  earth   = 9.80665,\n  moon    = 1.6279039,\n  mars    = 3.697107,\n  jupiter = 23.143694,\n  saturn  = 8.9828914,\n  uranus  = 8.7181118,\n  neptune = 10.983448,\n  pluto   = 0.6962721\n)\n```\n:::\n\n\nThen I can create a named list of projectile motion calculations, one for each planet. Each planet has its own list of output from `projectile_motion()`, so the resulting list of projectile motion calculations is actually a list of lists. This can be tidied into a tibble to make it easier to work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate projectile motion for each planet, given the same velocity,\n# angle, and height\nplanets_pm <- map(planets, ~{\n  projectile_motion(\n    velocity = 20,\n    angle = 45,\n    height = 35,\n    gravity = .x,\n    nframes = 100)\n})\n\n# Tidying the list of lists into a tibble makes it easier to work with. Note\n# that the trajectory column is a list column since it contains the trajectory\n# data frame for each planet.\nplanets_df <- planets_pm %>%\n  enframe() %>%\n  unnest_wider(value) %>%\n  rename(planet = name)\n\nplanets_trajectory <- planets_df %>%\n  select(planet, trajectory) %>%\n  unnest(trajectory) %>% \n  mutate(planet = factor(planet, levels = names(planets)))\n```\n:::\n\n\n## Visualize\n\nNow for visualization. First I'll plot a simple trajectory, then a projectile launched on different planets.\n\n### A simple trajectory\n\nThis is the same simple trajectory I showed the output for earlier, only with more frames to make the animation smoother.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimple_trajectory <- projectile_motion(\n  velocity = 11.4,\n  angle = 52.1,\n  height = 18,\n  nframes = 100\n)\n\n# Assign the data frame and max height parameters to objects to make the plot\n# code easier to read\ndf <- simple_trajectory$trajectory\nmax_height_dist <- simple_trajectory$max_height_dist\nmax_height_time <- simple_trajectory$max_height_time\nmax_height <- simple_trajectory$max_height\n```\n:::\n\n\nI'm going to build the plot for this simple trajectory up in chunks to make the code easier to understand. The foundation of the plot is fairly standard. The only unusual thing here are the `group` aesthetics in `geom_line()` and `geom_point()`. These are used to tell `gganimate` which rows in the data correspond to the same graphic element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(df, aes(x = x, y = y)) +\n  geom_line(\n    aes(group = 1),\n    linetype = \"dashed\",\n    colour = \"red\",\n    alpha = 0.5\n  ) +\n  geom_point(aes(group = 1), size = 2)\n```\n:::\n\n\nFor the data I simulated, the projectile starts with a positive vertical velocity. However, at its maximum height, the vertical velocity of the projectile becomes 0 m/s for a brief moment, as it stops rising and starts falling. This happens Because gravity is constantly influencing the vertical velocity of the projectile. This is an important and interesting piece of information I want to communicate in my plot. This can be accomplished subtly by displaying the vertical velocity of the projectile at each point in time, or more overtly using a text annotation. I'm going to do both.\n\nFirst the text annotation. I'm using `geom_curve()` to draw an arrow between the annotation and the point at which the projectile is at its maximum height, and `geom_text()` to draw the annotation. I've supplied each geom with its own data frame containing a `second` column whose sole value corresponds to the time the projectile reaches its maximum height. This will control when the annotation appears in the animation. I've also given the pair a different `group` aesthetic from `geom_line()` and `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_curve(\n    data = data.frame(\n      second = max_height_time\n    ),\n    aes(\n      xend = max_height_dist,\n      yend = max_height + 0.2,\n      x = max_height_dist + 2,\n      y = max_height + 2,\n      group = 2\n    ),\n    curvature = 0.45,\n    angle = 105,\n    ncp = 15,\n    arrow = arrow(length = unit(0.1,\"cm\"), type = \"closed\")\n  ) +\n  geom_text(\n    data = data.frame(\n      second = max_height_time\n    ),\n    aes(\n      x = max_height_dist + 2.4,\n      y = max_height + 2,\n      group = 2\n    ),\n    hjust = \"left\",\n    lineheight = 1,\n    family = \"serif\",\n    label = str_c(\n      \"At its maximum height, the vertical velocity \\n\", \n      \"of the projectile is 0 m/s for a brief moment, \\n\",\n      \"as it stops rising and starts falling.\"\n    )\n  )\n```\n:::\n\n\nSecond the vertical velocity. I'm displaying this in the plot's subtitle along with the time elapsed since the projectile was launched. The displayed values are updated each frame using the value returned by the expression enclosed in glue braces for a frame. The variable `frame_along` is made available by `gganimate::transition_along()` (see below) and gives the position on the along-dimension (time in seconds in this case) that a frame corresponds to. Here I'm using `frame_along` to display the elapsed time, and to index the data frame `df` for the vertical velocity at a given second. The latter is a slight workaround because `vy` cannot be accessed directly in the glue braces.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  labs(\n    title = str_c(\n      \"Projectile motion of an object launched with \",\n      #\" <br> \",\n      \"a speed of 11.4 m/s at an angle of 52.1°\"\n    ),\n    subtitle = str_c(\n      \"Time: \",\n      \"{formattable(frame_along, digits = 2, format = 'f')}s\",\n      \"\\n\",\n      \"Vertical velocity = \",\n      \"{formattable(df$vy[df$second == frame_along], digits = 2, format = 'f')}\",\n      \" m/s\"\n    ),\n    x = \"Distance (m)\",\n    y = \"Height (m)\",\n    caption = \"Graphic: Michael McCarthy\"\n  )\n```\n:::\n\n\nNow for theming. I wanted something minimalistic with a scientific feel---the classic theme  paired with truncated axes courtesy of ggh4x does this nicely. Finally, I originally planned to use `element_markdown()` from ggtext to enable markdown text in the subtitle of the plot so that vertical velocity could be written like $\\textrm{Velocity}_Y$; however, this caused issues with the text spacing when rendering the animation to video, so I opted not to.[^1]\n\n[^1]: I didn't look into it too deeply, but I'm guessing it's related to [this issue](https://github.com/wilkelab/ggtext/issues/95) in ggtext. If you render to a gif instead you won't have this issue and can use ggtext as normal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  guides(x = \"axis_truncated\", y = \"axis_truncated\") +\n  theme_classic(base_family = \"serif\")\n```\n:::\n\n\nAnd finally, the animation code. Yes, that's it. Animations can be tweaked and spiced up with [other functions](https://gganimate.com/reference/index.html) in gganimate, but I [ran into issues](https://github.com/thomasp85/gganimate/issues/445) making the ones I wanted to use work with `transition_reveal()`.\n\n::: {.column-margin}\nJust a note: The behaviour of `transition_reveal()` shown here was [broken in v1.0.8](https://github.com/thomasp85/gganimate/issues/468) of gganimate.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanim <- p +\n  transition_reveal(second)\n\nanim\n```\n:::\n\n::: {.cell opts.label='fig.graphic'}\n\n:::\n\n\n<img src='images/simple-trajectory.mp4' width =\"100%\">\n\n### Launching a projectile on different planets\n\nNow to test how the gravity of each planet in our solar system influences projectile motion. As a reminder, I already simulated the projectile motion data in `planets_trajectory`, so now it's just a matter of plotting it.\n\nSince the simulation is space themed, the plot should be too. Instead of using a simple point to represent the projectile, I'm going to use Font Awesome's rocket icon by way of the emojifont package. To make it extra, I'll also add propulsion and rotation to the rocket's animation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make it so the propulsion is only present for first half of animation, so it\n# looks like the rockets are launching.\nrocket_propulsion <- planets_trajectory %>%\n  group_by(planet) %>%\n  mutate(retain = rep(c(TRUE, FALSE), each = 50)) %>%\n  ungroup() %>%\n  mutate(x = case_when(\n    retain == FALSE ~ NA_real_,\n    TRUE ~ x\n  ))\n```\n:::\n\n\nThe plotting code is mostly boilerplate, but I've added comments to highlight a few noteworthy points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(planets_trajectory, aes(x = x, y = y)) +\n  geom_line(\n    aes(colour = planet, group = planet),\n    linetype = \"dashed\",\n    alpha = 0.5,\n    # Change the key glyph in the legend to a point, to represent a planet\n    key_glyph = \"point\"\n  ) +\n  geom_point(\n    data = rocket_propulsion,\n    aes(group = planet),\n    colour = \"orange\"\n  ) +\n  # Change the angle at different frames to rotate the rocket\n  geom_text(\n    aes(colour = planet, group = planet, label = fontawesome(\"fa-rocket\")),\n    family='fontawesome-webfont',\n    angle = rep(seq(0, 45, length = 100), 10),\n    size = 6,\n    # There is no rocket key glyph, so override this too\n    key_glyph = \"point\"\n  ) +\n  scale_color_manual(\n    values = c(\n      \"#97979F\",\n      \"#BBB7AB\",\n      \"#8CB1DE\",\n      \"#DAD9D7\",\n      \"#E27B58\",\n      \"#C88B3A\",\n      \"#C5AB6E\",\n      \"#93B8BE\",\n      \"#6081FF\",\n      \"#4390BA\"\n    )\n  ) +\n  labs(\n    title = str_c(\n      \"projectile motion of an object launched on different planets in our solar system\"\n    ),\n    x = \"distance (m)\",\n    y = \"height (m)\",\n    caption = \"graphic: michael mccarthy\"\n  ) +\n  guides(\n    x = \"axis_truncated\",\n    y = \"axis_truncated\",\n    colour = guide_legend(title.vjust = .7, nrow = 1, label.position = \"bottom\")\n  ) +\n  theme_classic(base_family = \"mono\") +\n  theme(\n    text = element_text(colour = \"white\"),\n    axis.text = element_text(colour = \"white\"),\n    rect = element_rect(fill = \"black\"),\n    panel.background = element_rect(fill = \"black\"),\n    axis.ticks = element_line(colour = \"white\"),\n    axis.line = element_line(colour = \"white\"),\n    legend.position = \"top\",\n    legend.justification = \"left\"\n  )\n```\n:::\n\n\nFinally, the animation code. The `shadow_wake()` function is applied to the orange points used for rocket propulsion to really sell the effect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanim <- p +\n  transition_reveal(second) +\n  shadow_wake(wake_length = 0.1, size = 2, exclude_layer = c(1, 3))\n```\n:::\n\n::: {.cell opts.label='fig.graphic'}\n\n:::\n\n\n<img src='images/planets-trajectory.mp4' width =\"100%\">\n\n\n## {.appendix .unnumbered .unlisted}\n\n::: {.d-flex}\n\n![](/assets/images/avatar.png){fig-align=\"left\" fig-alt=\"Avatar\" .rounded .avatar}\n\n::: {}\n\n::: {}\n## Michael McCarthy {.quarto-appendix-heading}\n:::\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my [consulting services](https://michaelmccarthy.tidytales.ca/consulting/), and my other projects on my [personal website](https://michaelmccarthy.tidytales.ca).\n:::\n\n:::\n\n## Comments {.appendix .unnumbered .unlisted}\n\n<details open>\n<summary></summary>\n::: {.giscus}\n:::\n</details>\n\n## Session Info {.appendix .unnumbered .unlisted}\n\n<details>\n<summary></summary>\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-24\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.10  2022-09-01 [1] CRAN (R 4.2.0)\n emojifont   * 0.5.5   2021-04-20 [1] CRAN (R 4.2.0)\n forcats     * 0.5.2   2022-08-19 [1] CRAN (R 4.2.0)\n formattable * 0.2.1   2021-01-07 [1] CRAN (R 4.2.0)\n gganimate   * 1.0.7   2020-10-15 [1] CRAN (R 4.2.2)\n ggh4x       * 0.2.3   2022-11-09 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.0   2022-11-04 [1] CRAN (R 4.2.0)\n glue        * 1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.2.0)\n purrr       * 0.3.5   2022-10-06 [1] CRAN (R 4.2.0)\n readr       * 2.1.3   2022-10-01 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.0)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.1   2022-09-08 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.2   2022-07-18 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n</details>\n\n<!--\n## Data {.appendix .unnumbered .unlisted}\n\n[Download](/data/) the data used in this post.\n-->\n\n<!--\n## Fair Dealing {.appendix .unnumbered .unlisted}\n\nAny of the trademarks, service marks, collective marks, design rights or similar rights that are mentioned, used, or cited in this article are the property of their respective owners. They are used here as fair dealing for the purpose of education in accordance with [section 29 of the Copyright Act](https://laws-lois.justice.gc.ca/eng/acts/c-42/page-8.html#h-103270) and do not infringe copyright.\n-->\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}