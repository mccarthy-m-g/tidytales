{
  "hash": "e737a09eb30d191f2dac4a34404c6ab7",
  "result": {
    "markdown": "---\ntitle: Introducing the palettes package\ndescription: |\n  I am proud to announce the first release of the palettes package is now on\n  CRAN. This version introduces a new family of colour classes that make working\n  with colour vectors and colour palettes easy and fun.\n  \nauthor:\n  - name: Michael McCarthy\n    url: https://michaelmccarthy.tidytales.ca\n\ndate: '2022-12-19'\n\ncategories:\n  - .Visualize\n  - \"{palettes}\"\n  - \"{ggplot2}\"\n  - \"{gt}\"\n  - \"{biscale}\"\n\nimage: images/logo.png\n\ntwitter-card:\n  title: \"Tidy Tales: Introducing the palettes package\"\n  image: images/card.png\n  image-width: 1200\n  image-height: 628\n  card-style: summary_large_image\n\nopen-graph:\n  title: \"Tidy Tales: Introducing the palettes package\"\n  image: images/card.png\n\nparams:\n  use_renv: FALSE\n  data_file: NULL\n  fair_dealing: FALSE\n  \ndf-print: default\n---\n\n\n<!-- Quarto does not support ANSI colour output through downlit at the time this post was written, but fansi knitr hooks can be used to make it work. -->\n\n\n<STYLE type='text/css' scoped>\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\n</STYLE>\n\n\n<!-- The font I'm using makes the bullets really small. Changing the font provides a nice and quick fix. -->\n\n\n```{=html}\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.6.2.min.js\"></script>\n<script>\n$(function(){\n  $(\"span\").each(function(){\n    var text = $(this).text()\n    if (text === \"•\") {\n      $(this).css(\"font-family\", \"monospace\");\n    }\n  });\n});\n</script>\n```\n\n\n## Overview\n\nI am proud to announce that version 0.1.0 of the [palettes package](https://mccarthy-m-g.github.io/palettes/index.html) is now on [CRAN](). palettes is an R package for working with colour vectors and colour palettes. I made it with three main goals in mind, each described in a vignette on the package website:\n\n- To provide [a new family of colour classes](https://mccarthy-m-g.github.io/palettes/articles/palettes.html) (`palettes_colour` and `palettes_palette`) that always print as hex codes with colour previews.\n\n- To provide a comprehensive library of methods for working with colour vectors and colour palettes, including methods for [ggplot2](https://mccarthy-m-g.github.io/palettes/articles/ggplot2.html), [gt](https://mccarthy-m-g.github.io/palettes/articles/gt.html), [biscale](https://mccarthy-m-g.github.io/palettes/articles/biscale.html), and [other colour packages](https://mccarthy-m-g.github.io/palettes/articles/compatibility.html).\n\n- To make it easy for anyone to [make their own colour palette package](https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html). Colour palette packages made with palettes exist solely for the purpose of distributing colour palettes and get access to all the features of palettes for free.\n\nIf you just want to jump in and start using palettes, you can install it from CRAN with:\n\n```r\ninstall.packages(\"palettes\")\n```\n\nThe package website is the best place to start: <https://mccarthy-m-g.github.io/palettes/index.html>\n\nIf you want to learn more about *why* you should be using palettes, read on to learn more about the motivation of the package and how it makes working with colour vectors and colour palettes easy and fun for everyone.\n\n## Origins\n\nThe origins of palettes start with a different (in purgatory) package, **BPRDcolours**, which I was inspired to make while reading Mike Mignola’s Hellboy comics. Every page of Hellboy is a masterclass in colour and contrast, and I thought it would be fun to bring those colours into R:\n\n![Hellboy promo poster by Mike Mignola](images/hellboy.jpg){height=500px}\n\nSo how does one make a colour palette package in R? My answer now is to read the [Creating a colour palette package](https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html) vignette and make it with palettes. My answer then was to read the source code of several other colour palette packages, then reimplement the relevant functions in BPRDcolours. Not a great answer, but it’s the approach everyone else was using.\n\nI managed to put together a rough [development version](https://github.com/mccarthy-m-g/BPRDcolours), but got sidetracked with other projects soon after and put BPRDcolours on hold. And so my mind was left to brew on a better way to go about this whole colour palette package thing.\n\n## Enter palettes\n\nOne year after development on BPRDcolours stopped, I started palettes.\n\nThe main motivation behind palettes was to standardize and simplify the process of making a colour palette package. No more reading through other’s source code to figure out how to store colours or make them work with ggplot2 plots. No more unnecessary code duplication. I wanted the process of shipping a set of hex colour codes in an R package to be as simple as, well... shipping a set of hex colour codes in an R package. Anything extra like ggplot2 functionality should come for free.\n\nA secondary motivation was to provide pretty printing of colour palettes, with colour previews next to the hex colour codes. This was inspired by packages like [taylor](https://taylor.wjakethompson.com/reference/color_palette.html) and [prismatic](https://github.com/EmilHvitfeldt/prismatic), which provide their own pretty printing methods for colours using the **crayon** package. palettes uses the **cli** package for pretty printing, which has superseded crayon.\n\n## Just show me some colour palettes already!\n\nOkay, okay. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palettes)\n```\n:::\n\n\nColour classes in palettes come in two forms:\n\n- Colour vectors (`palettes_colour`), which are created by `pal_colour()`\n- Colour palettes (`palettes_palette`), which are created by `pal_palette()`\n\nColour vectors can be thought of as a base type for colours, and colour palettes are just (named) lists of colour vectors. To illustrate, let's use some colours from the [MetBrewer](https://github.com/BlakeRMills/MetBrewer) package.\n\n`pal_colour()` is a nice way to create a colour vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njava <- pal_colour(c(\"#663171\", \"#cf3a36\", \"#ea7428\", \"#e2998a\", \"#0c7156\"))\njava\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; &lt;palettes_colour[5]&gt;\n#&gt; <span style='color: #875F87;'>•</span> #663171\n#&gt; <span style='color: #D75F5F;'>•</span> #CF3A36\n#&gt; <span style='color: #FF8700;'>•</span> #EA7428\n#&gt; <span style='color: #FFAFAF;'>•</span> #E2998A\n#&gt; <span style='color: #008787;'>•</span> #0C7156\n</CODE></PRE>\n:::\n\n\n`pal_palette()` is a nice way to create named colour palettes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetbrewer_palettes <- pal_palette(\n  egypt = c(\"#dd5129\", \"#0f7ba2\", \"#43b284\", \"#fab255\"),\n  java  = java\n)\nmetbrewer_palettes\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; &lt;palettes_palette[2]&gt;\n#&gt; $egypt\n#&gt; &lt;palettes_colour[4]&gt;\n#&gt; <span style='color: #FF5F00;'>•</span> #DD5129\n#&gt; <span style='color: #0087AF;'>•</span> #0F7BA2\n#&gt; <span style='color: #5FD7AF;'>•</span> #43B284\n#&gt; <span style='color: #FFD75F;'>•</span> #FAB255\n#&gt; \n#&gt; $java\n#&gt; &lt;palettes_colour[5]&gt;\n#&gt; <span style='color: #875F87;'>•</span> #663171\n#&gt; <span style='color: #D75F5F;'>•</span> #CF3A36\n#&gt; <span style='color: #FF8700;'>•</span> #EA7428\n#&gt; <span style='color: #FFAFAF;'>•</span> #E2998A\n#&gt; <span style='color: #008787;'>•</span> #0C7156\n</CODE></PRE>\n:::\n\n\n`plot()` is a nice way to showcase colour vectors and colour palettes. The appearance of the plot [depends on the input](https://mccarthy-m-g.github.io/palettes/articles/palettes.html#plotting).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(metbrewer_palettes)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n[Casting and coercion methods](https://mccarthy-m-g.github.io/palettes/articles/palettes.html#casting-and-coercion) are also available to turn other objects (like character vectors or lists) into colour vectors and colour palettes.\n\nYou can even cast colour vectors and colour palettes into tibbles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetbrewer_tbl <- as_tibble(metbrewer_palettes)\nmetbrewer_tbl\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #949494;'># A tibble: 9 × 2</span>\n#&gt;   palette colour   \n#&gt;   <span style='color: #949494; font-style: italic;'>&lt;chr&gt;</span>   <span style='color: #949494; font-style: italic;'>&lt;colour&gt;</span> \n#&gt; <span style='color: #BCBCBC;'>1</span> egypt   <span style='color: #FF5F00;'>•</span> #DD5129\n#&gt; <span style='color: #BCBCBC;'>2</span> egypt   <span style='color: #0087AF;'>•</span> #0F7BA2\n#&gt; <span style='color: #BCBCBC;'>3</span> egypt   <span style='color: #5FD7AF;'>•</span> #43B284\n#&gt; <span style='color: #BCBCBC;'>4</span> egypt   <span style='color: #FFD75F;'>•</span> #FAB255\n#&gt; <span style='color: #BCBCBC;'>5</span> java    <span style='color: #875F87;'>•</span> #663171\n#&gt; <span style='color: #BCBCBC;'>6</span> java    <span style='color: #D75F5F;'>•</span> #CF3A36\n#&gt; <span style='color: #BCBCBC;'>7</span> java    <span style='color: #FF8700;'>•</span> #EA7428\n#&gt; <span style='color: #BCBCBC;'>8</span> java    <span style='color: #FFAFAF;'>•</span> #E2998A\n#&gt; <span style='color: #BCBCBC;'>9</span> java    <span style='color: #008787;'>•</span> #0C7156\n</CODE></PRE>\n:::\n\n\nThis is useful if you want to wrangle the colours with **dplyr**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nmetbrewer_tbl <- slice(metbrewer_tbl, -8)\nmetbrewer_tbl\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #949494;'># A tibble: 8 × 2</span>\n#&gt;   palette colour   \n#&gt;   <span style='color: #949494; font-style: italic;'>&lt;chr&gt;</span>   <span style='color: #949494; font-style: italic;'>&lt;colour&gt;</span> \n#&gt; <span style='color: #BCBCBC;'>1</span> egypt   <span style='color: #FF5F00;'>•</span> #DD5129\n#&gt; <span style='color: #BCBCBC;'>2</span> egypt   <span style='color: #0087AF;'>•</span> #0F7BA2\n#&gt; <span style='color: #BCBCBC;'>3</span> egypt   <span style='color: #5FD7AF;'>•</span> #43B284\n#&gt; <span style='color: #BCBCBC;'>4</span> egypt   <span style='color: #FFD75F;'>•</span> #FAB255\n#&gt; <span style='color: #BCBCBC;'>5</span> java    <span style='color: #875F87;'>•</span> #663171\n#&gt; <span style='color: #BCBCBC;'>6</span> java    <span style='color: #D75F5F;'>•</span> #CF3A36\n#&gt; <span style='color: #BCBCBC;'>7</span> java    <span style='color: #FF8700;'>•</span> #EA7428\n#&gt; <span style='color: #BCBCBC;'>8</span> java    <span style='color: #008787;'>•</span> #0C7156\n</CODE></PRE>\n:::\n\n\nThen go back to a colour palette with the `deframe()` function from **tibble**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\nmetbrewer_tbl %>%\n  group_by(palette) %>%\n  summarise(pal_palette(colour)) %>%\n  deframe()\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; &lt;palettes_palette[2]&gt;\n#&gt; $egypt\n#&gt; &lt;palettes_colour[4]&gt;\n#&gt; <span style='color: #FF5F00;'>•</span> #DD5129\n#&gt; <span style='color: #0087AF;'>•</span> #0F7BA2\n#&gt; <span style='color: #5FD7AF;'>•</span> #43B284\n#&gt; <span style='color: #FFD75F;'>•</span> #FAB255\n#&gt; \n#&gt; $java\n#&gt; &lt;palettes_colour[4]&gt;\n#&gt; <span style='color: #875F87;'>•</span> #663171\n#&gt; <span style='color: #D75F5F;'>•</span> #CF3A36\n#&gt; <span style='color: #FF8700;'>•</span> #EA7428\n#&gt; <span style='color: #008787;'>•</span> #0C7156\n</CODE></PRE>\n:::\n\n\n## What about ggplot2 plots?\n\nJust use one of the `scale_` functions!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nhiroshige <- pal_colour(c(\n  \"#1e466e\", \"#376795\", \"#528fad\", \"#72bcd5\", \"#aadce0\",\n  \"#ffe6b7\", \"#ffd06f\", \"#f7aa58\", \"#ef8a47\", \"#e76254\"\n))\n\nggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() +\n  coord_cartesian(expand = FALSE) +\n  scale_fill_palette_c(hiroshige)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThere are `scale_` functions for discrete, continuous, and binned data, and you can pass additional arguments to them for [further customization](https://mccarthy-m-g.github.io/palettes/articles/ggplot2.html#customizing-scales).\n\n## I'm sold. How do I make a colour palette package?\n\nSee the [Creating a colour palette package](https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html) vignette, which works through an [example package](https://github.com/mccarthy-m-g/sunsets) showing the steps needed to make a colour palette package with palettes.\n\nIf you do make a package with palettes, let me know through [email](/about/#contact) or [Mastodon](https://fosstodon.org/@mccarthymg)! In the future I'd like to make a \"palettesverse\" to showcase and collect all the packages using palettes in one place.\n\n## What's next?\n\nIn future versions I would like to:\n\n- Provide an option to choose the symbol used for colour previews\n- Add functions for manipulating colour palettes\n- Add an interpolation function for bivariate colour scales\n- Make a better hex sticker (looking for help on this one!)\n\nIf you have other suggestions or requests, please [file an issue on GitHub](https://github.com/mccarthy-m-g/palettes/issues).\n\n\n## {.appendix .unnumbered .unlisted}\n\n::: {.d-flex}\n\n![](/assets/images/avatar.png){fig-align=\"left\" fig-alt=\"Avatar\" .rounded .avatar}\n\n::: {}\n\n::: {}\n## Michael McCarthy {.quarto-appendix-heading}\n:::\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my [consulting services](https://michaelmccarthy.tidytales.ca/consulting/), and my other projects on my [personal website](https://michaelmccarthy.tidytales.ca).\n:::\n\n:::\n\n## Comments {.appendix .unnumbered .unlisted}\n\n<details open>\n<summary></summary>\n::: {.giscus}\n:::\n</details>\n\n## Session Info {.appendix .unnumbered .unlisted}\n\n<details>\n<summary></summary>\n::: {.cell}\n<PRE class=\"fansi fansi-output\"><CODE><span style='color: #00BBBB; font-weight: bold;'>─ Session info ───────────────────────────────────────────────────────────────</span>\n <span style='color: #555555; font-style: italic;'>setting </span> <span style='color: #555555; font-style: italic;'>value</span>\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-20\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n<span style='color: #00BBBB; font-weight: bold;'>─ Packages ───────────────────────────────────────────────────────────────────</span>\n <span style='color: #555555; font-style: italic;'>package    </span> <span style='color: #555555; font-style: italic;'>*</span> <span style='color: #555555; font-style: italic;'>version</span> <span style='color: #555555; font-style: italic;'>date (UTC)</span> <span style='color: #555555; font-style: italic;'>lib</span> <span style='color: #555555; font-style: italic;'>source</span>\n dplyr       * 1.0.10  <span style='color: #555555;'>2022-09-01</span> <span style='color: #555555;'>[1]</span> <span style='color: #555555;'>CRAN (R 4.2.0)</span>\n ggplot2     * 3.4.0   <span style='color: #555555;'>2022-11-04</span> <span style='color: #555555;'>[1]</span> <span style='color: #555555;'>CRAN (R 4.2.0)</span>\n palettes    * 0.1.0   <span style='color: #555555;'>2022-12-19</span> <span style='color: #555555;'>[1]</span> <span style='color: #555555;'>CRAN (R 4.2.2)</span>\n sessioninfo * 1.2.2   <span style='color: #555555;'>2021-12-06</span> <span style='color: #555555;'>[1]</span> <span style='color: #555555;'>CRAN (R 4.2.0)</span>\n tibble      * 3.1.8   <span style='color: #555555;'>2022-07-22</span> <span style='color: #555555;'>[1]</span> <span style='color: #555555;'>CRAN (R 4.2.0)</span>\n\n<span style='color: #555555;'> [1] /Users/Michael/Library/R/x86_64/4.2/library/__devel</span>\n<span style='color: #555555;'> [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library</span>\n\n<span style='color: #00BBBB; font-weight: bold;'>──────────────────────────────────────────────────────────────────────────────</span>\n</CODE></PRE>\n:::\n</details>\n\n<!--\n## Data {.appendix .unnumbered .unlisted}\n\n[Download](/data/) the data used in this post.\n-->\n\n<!--\n## Fair Dealing {.appendix .unnumbered .unlisted}\n\nAny of the trademarks, service marks, collective marks, design rights or similar rights that are mentioned, used, or cited in this article are the property of their respective owners. They are used here as fair dealing for the purpose of education in accordance with [section 29 of the Copyright Act](https://laws-lois.justice.gc.ca/eng/acts/c-42/page-8.html#h-103270) and do not infringe copyright.\n-->\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}