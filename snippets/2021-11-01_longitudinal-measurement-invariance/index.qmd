---
title: "Longitudinal Measurement Invariance"
description: |
  Testing longitudinal measurement invariance with {lavaan} and {semTools}.

date: 11-01-2021

categories:
  - .Model
  - "{lavaan}"
  - "{semTools}"
  
params:
  use_renv: FALSE
  data_file: "2021-11-01_social-exchanges.csv" # Filename of data located in /data/
  fair_dealing: FALSE
---

```{r setup, include=FALSE}
# Ensure the project root is set up correctly using {here} --------------------
here::i_am(
  "snippets/2021-11-01_longitudinal-measurement-invariance/index.qmd"
)

# Load general set up packages used in all posts ------------------------------
library(here)

# Load R scripts located in R/ ------------------------------------------------

# Create templates for knitr code chunks --------------------------------------
knitr::opts_template$set(
  fig.graphic = list(echo = FALSE),
  no.message = list(message = FALSE, warning = FALSE)
)
```

## Prerequisites

To access the datasets, help pages, and functions that we will use in this code snippet, load the following packages:

```{r prerequisite-packages, opts.label="no.message"}
library(lavaan)
library(semTools)
```

And read in the data:

```{r prerequisite-data}
social_exchanges <- read.csv(here("data", "2021-11-01_social-exchanges.csv"))
```

The data contains simulated values for several indicators of positive and negative social exchanges, measured on two occasions (`w1` and `w2`). There are three continuous indicators that measure perceived companionship (`vst1`, `vst2`, `vst3`), and three binary indicators that measure unwanted advice (`unw1`, `unw2`, `unw3`). The data and some of the examples come from [Longitudinal Structural Equation Modeling: A Comprehensive Introduction](http://www.longitudinalsem.com) by Jason Newsom.

## Configural Invariance

Using the **lavaan** package.

```{r configural-invariance-lavaan}
configural_model_lav <- '
  # Measurement model
  w1comp =~ w1vst1 + w1vst2 + w1vst3
  w2comp =~ w2vst1 + w2vst2 + w2vst3
  
  # Variances and covariances
  w2comp ~~ w1comp
  w1comp ~~ w1comp
  w2comp ~~ w2comp

  w1vst1 ~~ w1vst1
  w1vst2 ~~ w1vst2
  w1vst3 ~~ w1vst3
  w2vst1 ~~ w2vst1
  w2vst2 ~~ w2vst2
  w2vst3 ~~ w2vst3

  w1vst1 ~~ w2vst1
	w1vst2 ~~ w2vst2
	w1vst3 ~~ w2vst3
'

configural_model_lav_fit <- sem(configural_model_lav, data = social_exchanges)
```

Using the **semTools** package.

```{r configural-invariance-semtools}
# First, define the configural model, using the repeated measures factors and
# indicators.
configural_model_smt <- '
  # Measurement model
  w1comp =~ w1vst1 + w1vst2 + w1vst3
	w2comp =~ w2vst1 + w2vst2 + w2vst3
'

# Second, create a named list indicating which factors are actually the same
# latent variable measured repeatedly.
longitudinal_factor_names <- list(
  comp = c("w1comp", "w2comp")
)

# Third, generate the lavaan model syntax using semTools.
configural_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "Wu.Estabrook.2016",
  data = social_exchanges
)
configural_model_smt <- as.character(configural_model_smt)

# Finally, fit the model using lavaan.
configural_model_smt_fit <- sem(configural_model_smt, data = social_exchanges)
```

Compare lavaan and semTools fit measures.


::: {.column-margin}
Configural invariance is met if the model fits well, indicators load on the same factors, and loadings are all of acceptable magnitude. An alternative way of testing longitudinal configural invariance is to fit separate confirmatory factor models at each time point; configural invariance is met if the previously stated criteria hold and the measure has the same factor structure at each time point.
:::

```{r configural-invariance-comparison}
fitMeasures(configural_model_lav_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
fitMeasures(configural_model_smt_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
```

## Weak Invariance

Using the lavaan package.

```{r weak-invariance-lavaan}
weak_model_lav <- '
  # Measurement model
  w1comp =~ w1vst1 + a*w1vst2 + b*w1vst3 # Factor loading equality constraint
	w2comp =~ w2vst1 + a*w2vst2 + b*w2vst3 # Factor loading equality constraint

  # Variances and covariances
	w2comp ~~ w1comp
  w1comp ~~ w1comp
  w2comp ~~ w2comp

  w1vst1 ~~ w1vst1
  w1vst2 ~~ w1vst2
  w1vst3 ~~ w1vst3
  w2vst1 ~~ w2vst1
  w2vst2 ~~ w2vst2
  w2vst3 ~~ w2vst3

  w1vst1 ~~ w2vst1
	w1vst2 ~~ w2vst2
	w1vst3 ~~ w2vst3
'

weak_model_lav_fit <- sem(weak_model_lav, social_exchanges)
```

Using the semTools package.

```{r weak-invariance-semtools}
weak_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "Wu.Estabrook.2016",
  long.equal = c("loadings"),
  data = social_exchanges
)
weak_model_smt <- as.character(weak_model_smt)

weak_model_smt_fit <- sem(weak_model_smt, data = social_exchanges)
```

Compare lavaan and semTools fit measures.

```{r weak-invariance-comparison}
fitMeasures(weak_model_lav_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
fitMeasures(weak_model_smt_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
```

Test weak invariance.

```{r weak-invariance-test}
lavTestLRT(configural_model_lav_fit, weak_model_lav_fit)
```

## Strong Invariance

Using the lavaan package.

::: {.column-margin}
Equality tests of factor variances should only be conducted when all factor loadings also are constrained to be equal over time. When all non-referent loadings are set equal in the constrained model, the chi-square is the same regardless of the referent.
:::

```{r strong-invariance-lavaan}
strong_model_lav <- '
  # Measurement model
  w1comp =~ w1vst1 + a*w1vst2 + b*w1vst3 # Factor loading equality constraint
  w2comp =~ w2vst1 + a*w2vst2 + b*w2vst3 # Factor loading equality constraint

  # Variances and covariances
	w2comp ~~ w1comp
	w2comp ~~ v*w2comp # Factor variance equality constraint
	w1comp ~~ v*w1comp # Factor variance equality constraint

	w1vst1 ~~ w2vst1
	w1vst2 ~~ w2vst2
	w1vst3 ~~ w2vst3
'

strong_model_lav_fit <- sem(strong_model_lav, social_exchanges)
```

Using the semTools package.

```{r strong-invariance-semtools}
# Example 2.2
strong_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "Wu.Estabrook.2016",
  long.equal = c("loadings", "lv.variances"),
  data = social_exchanges
)
strong_model_smt <- as.character(strong_model_smt)

strong_model_smt_fit <- sem(strong_model_smt, social_exchanges)
```

Compare lavaan and semTools fit measures.

```{r strong-invariance-comparison}
fitMeasures(strong_model_lav_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
fitMeasures(strong_model_smt_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
```

Test strong invariance.

```{r strong-invariance-test}
lavTestLRT(configural_model_lav_fit, weak_model_lav_fit, strong_model_lav_fit)
```

## Strict Invariance

Using the lavaan package.

```{r strict-invariance-lavaan}
strict_model_lav <- '
  # Measurement model
  w1comp =~ w1vst1 + a*w1vst2 + b*w1vst3 # Factor loading equality constraint
	w2comp =~ w2vst1 + a*w2vst2 + b*w2vst3 # Factor loading equality constraint

  # Variances & covariances
	w2comp ~~ w1comp

	w1comp ~~ c*w1comp # Factor variance equality constraint
	w2comp ~~ c*w2comp # Factor variance equality constraint

  w1vst1 ~~ w2vst1
	w1vst2 ~~ w2vst2
	w1vst3 ~~ w2vst3

	w1vst1 ~~ d*w1vst1 # Measurement residual equality constraint
	w1vst2 ~~ e*w1vst2 # Measurement residual equality constraint
	w1vst3 ~~ f*w1vst3 # Measurement residual equality constraint

	w2vst1 ~~ d*w2vst1 # Measurement residual equality constraint
	w2vst2 ~~ e*w2vst2 # Measurement residual equality constraint
	w2vst3 ~~ f*w2vst3 # Measurement residual equality constraint
'

strict_model_lav_fit <- sem(strict_model_lav, social_exchanges)
```

Using the semTools package.

```{r strict-invariance-semtools}
strict_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "Wu.Estabrook.2016",
  long.equal = c("loadings", "lv.variances", "residuals"),
  data = social_exchanges
)
strict_model_smt <- as.character(strict_model_smt)

strict_model_smt_fit <- sem(strict_model_smt, social_exchanges)
```

Compare lavaan and semTools fit measures.

```{r strict-invariance-comparison}
fitMeasures(strict_model_lav_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
fitMeasures(strict_model_smt_fit, c("chisq", "df", "pvalue", "cfi", "rmsea"))
```

Test strict invariance.

```{r strict-invariance-test}
lavTestLRT(
  configural_model_lav_fit,
  weak_model_lav_fit,
  strong_model_lav_fit,
  strict_model_lav_fit
)
```

{{< include /_common/_appendix.qmd >}}
