[
  {
    "objectID": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html",
    "href": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html",
    "title": "Directly labeling ggdist lineribbons with geomtextpath",
    "section": "",
    "text": "To access the datasets, help pages, and functions that we will use in this code snippet, load the following packages:\n\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(geomtextpath)"
  },
  {
    "objectID": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#directly-labeling-lineribbons",
    "href": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#directly-labeling-lineribbons",
    "title": "Directly labeling ggdist lineribbons with geomtextpath",
    "section": "Directly labeling lineribbons",
    "text": "Directly labeling lineribbons\nFirst make some data.\n\nset.seed(1234)\nn = 5000\n\ndf <- tibble(\n  .draw = 1:n,\n  intercept = rnorm(n, 3, 1),\n  slope = rnorm(n, 1, 0.25),\n  x = list(-4:5),\n  y = map2(intercept, slope, ~ .x + .y * -4:5)\n) %>%\n  unnest(c(x, y))\n\nThen plot it.\n\ndf %>%\n  group_by(x) %>%\n  median_qi(y, .width = c(.50, .80, .95)) %>%\n  ggplot(aes(x = x, y = y, ymin = .lower, ymax = .upper)) +\n  # Hide the line from geom_lineribbon() by setting `size = 0`\n  geom_lineribbon(size = 0) +\n  scale_fill_brewer() +\n  # Replace the hidden line with a labelled line\n  geom_textline(label = \"label\")"
  },
  {
    "objectID": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#section",
    "href": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#section",
    "title": "Directly labeling ggdist lineribbons with geomtextpath",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#michael-mccarthy",
    "href": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#michael-mccarthy",
    "title": "Directly labeling ggdist lineribbons with geomtextpath",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#comments",
    "href": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#comments",
    "title": "Directly labeling ggdist lineribbons with geomtextpath",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#session-info",
    "href": "snippets/2022-10-29_geomtextpath-with-ggdist/index.html#session-info",
    "title": "Directly labeling ggdist lineribbons with geomtextpath",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-11-23\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.269 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version    date (UTC) lib source\n dplyr        * 1.0.10     2022-09-01 [1] CRAN (R 4.1.2)\n forcats      * 0.5.1      2021-01-27 [1] CRAN (R 4.1.0)\n geomtextpath * 0.1.1      2022-08-30 [1] CRAN (R 4.1.2)\n ggdist       * 3.1.1.9001 2022-06-19 [1] Github (mjskay/ggdist@25a813d)\n ggplot2      * 3.3.6      2022-05-03 [1] CRAN (R 4.1.2)\n purrr        * 0.3.4      2020-04-17 [1] CRAN (R 4.1.0)\n readr        * 2.1.2      2022-01-30 [1] CRAN (R 4.1.2)\n sessioninfo  * 1.2.2      2021-12-06 [1] CRAN (R 4.1.0)\n stringr      * 1.4.0      2019-02-10 [1] CRAN (R 4.1.0)\n tibble       * 3.1.6      2021-11-07 [1] CRAN (R 4.1.0)\n tidyr        * 1.2.0      2022-02-01 [1] CRAN (R 4.1.2)\n tidyverse    * 1.3.1      2021-04-15 [1] CRAN (R 4.1.0)\n\n [1] /Users/Michael/Library/R/4.1/library\n [2] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html",
    "title": "Longitudinal Measurement Invariance",
    "section": "",
    "text": "To access the datasets, help pages, and functions that we will use in this code snippet, load the following packages:\n\nlibrary(lavaan)\nlibrary(semTools)\n\nAnd read in the data:\n\nsocial_exchanges <- read.csv(here(\"data\", \"2021-11-01_social-exchanges.csv\"))\n\nThe data contains simulated values for several indicators of positive and negative social exchanges, measured on two occasions (w1 and w2). There are three continuous indicators that measure perceived companionship (vst1, vst2, vst3), and three binary indicators that measure unwanted advice (unw1, unw2, unw3). The data and some of the examples come from Longitudinal Structural Equation Modeling: A Comprehensive Introduction by Jason Newsom."
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#configural-invariance",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#configural-invariance",
    "title": "Longitudinal Measurement Invariance",
    "section": "Configural Invariance",
    "text": "Configural Invariance\nUsing the lavaan package.\n\nconfigural_model_lav <- (\"\n  # Measurement model\n  w1comp =~ w1vst1 + w1vst2 + w1vst3\n  w2comp =~ w2vst1 + w2vst2 + w2vst3\n  \n  # Variances and covariances\n  w2comp ~~ w1comp\n  w1comp ~~ w1comp\n  w2comp ~~ w2comp\n\n  w1vst1 ~~ w1vst1\n  w1vst2 ~~ w1vst2\n  w1vst3 ~~ w1vst3\n  w2vst1 ~~ w2vst1\n  w2vst2 ~~ w2vst2\n  w2vst3 ~~ w2vst3\n\n  w1vst1 ~~ w2vst1\n  w1vst2 ~~ w2vst2\n  w1vst3 ~~ w2vst3\n\")\n\nconfigural_model_lav_fit <- sem(configural_model_lav, data = social_exchanges)\n\nUsing the semTools package.\n\n# First, define the configural model, using the repeated measures factors and\n# indicators.\nconfigural_model_smt <- (\"\n  # Measurement model\n  w1comp =~ w1vst1 + w1vst2 + w1vst3\n  w2comp =~ w2vst1 + w2vst2 + w2vst3\n\")\n\n# Second, create a named list indicating which factors are actually the same\n# latent variable measured repeatedly.\nlongitudinal_factor_names <- list(\n  comp = c(\"w1comp\", \"w2comp\")\n)\n\n# Third, generate the lavaan model syntax using semTools.\nconfigural_model_smt <- measEq.syntax(\n  configural.model = configural_model_smt,\n  longFacNames = longitudinal_factor_names,\n  ID.fac = \"std.lv\",\n  ID.cat = \"Wu.Estabrook.2016\",\n  data = social_exchanges\n)\nconfigural_model_smt <- as.character(configural_model_smt)\n\n# Finally, fit the model using lavaan.\nconfigural_model_smt_fit <- sem(configural_model_smt, data = social_exchanges)\n\nCompare lavaan and semTools fit measures.\n\n\nConfigural invariance is met if the model fits well, indicators load on the same factors, and loadings are all of acceptable magnitude. An alternative way of testing longitudinal configural invariance is to fit separate confirmatory factor models at each time point; configural invariance is met if the previously stated criteria hold and the measure has the same factor structure at each time point.\n\nfitMeasures(configural_model_lav_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#>  9.911  5.000  0.078  0.997  0.041\n\nfitMeasures(configural_model_smt_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#>  9.911  5.000  0.078  0.997  0.041"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#weak-invariance",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#weak-invariance",
    "title": "Longitudinal Measurement Invariance",
    "section": "Weak Invariance",
    "text": "Weak Invariance\nUsing the lavaan package.\n\nweak_model_lav <- (\"\n  # Measurement model\n  w1comp =~ w1vst1 + a*w1vst2 + b*w1vst3 # Factor loading equality constraint\n  w2comp =~ w2vst1 + a*w2vst2 + b*w2vst3 # Factor loading equality constraint\n\n  # Variances and covariances\n  w2comp ~~ w1comp\n  w1comp ~~ w1comp\n  w2comp ~~ w2comp\n\n  w1vst1 ~~ w1vst1\n  w1vst2 ~~ w1vst2\n  w1vst3 ~~ w1vst3\n  w2vst1 ~~ w2vst1\n  w2vst2 ~~ w2vst2\n  w2vst3 ~~ w2vst3\n\n  w1vst1 ~~ w2vst1\n  w1vst2 ~~ w2vst2\n  w1vst3 ~~ w2vst3\n\")\n\nweak_model_lav_fit <- sem(weak_model_lav, social_exchanges)\n\nUsing the semTools package.\n\nweak_model_smt <- measEq.syntax(\n  configural.model = configural_model_smt,\n  longFacNames = longitudinal_factor_names,\n  ID.fac = \"std.lv\",\n  ID.cat = \"Wu.Estabrook.2016\",\n  long.equal = c(\"loadings\"),\n  data = social_exchanges\n)\nweak_model_smt <- as.character(weak_model_smt)\n\nweak_model_smt_fit <- sem(weak_model_smt, data = social_exchanges)\n\nCompare lavaan and semTools fit measures.\n\nfitMeasures(weak_model_lav_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#> 12.077  7.000  0.098  0.997  0.036\n\nfitMeasures(weak_model_smt_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#> 12.077  7.000  0.098  0.997  0.036\n\n\nTest weak invariance.\n\nlavTestLRT(configural_model_lav_fit, weak_model_lav_fit)"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#strong-invariance",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#strong-invariance",
    "title": "Longitudinal Measurement Invariance",
    "section": "Strong Invariance",
    "text": "Strong Invariance\nUsing the lavaan package.\n\n\nEquality tests of factor variances should only be conducted when all factor loadings also are constrained to be equal over time. When all non-referent loadings are set equal in the constrained model, the chi-square is the same regardless of the referent.\n\nstrong_model_lav <- (\"\n  # Measurement model\n  w1comp =~ w1vst1 + a*w1vst2 + b*w1vst3 # Factor loading equality constraint\n  w2comp =~ w2vst1 + a*w2vst2 + b*w2vst3 # Factor loading equality constraint\n\n  # Variances and covariances\n  w2comp ~~ w1comp\n  w2comp ~~ v*w2comp # Factor variance equality constraint\n  w1comp ~~ v*w1comp # Factor variance equality constraint\n\n  w1vst1 ~~ w2vst1\n  w1vst2 ~~ w2vst2\n  w1vst3 ~~ w2vst3\n\")\n\nstrong_model_lav_fit <- sem(strong_model_lav, social_exchanges)\n\nUsing the semTools package.\n\n# Example 2.2\nstrong_model_smt <- measEq.syntax(\n  configural.model = configural_model_smt,\n  longFacNames = longitudinal_factor_names,\n  ID.fac = \"std.lv\",\n  ID.cat = \"Wu.Estabrook.2016\",\n  long.equal = c(\"loadings\", \"lv.variances\"),\n  data = social_exchanges\n)\nstrong_model_smt <- as.character(strong_model_smt)\n\nstrong_model_smt_fit <- sem(strong_model_smt, social_exchanges)\n\nCompare lavaan and semTools fit measures.\n\nfitMeasures(strong_model_lav_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#> 37.553  8.000  0.000  0.983  0.080\n\nfitMeasures(strong_model_smt_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#> 37.553  8.000  0.000  0.983  0.080\n\n\nTest strong invariance.\n\nlavTestLRT(configural_model_lav_fit, weak_model_lav_fit, strong_model_lav_fit)"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#strict-invariance",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#strict-invariance",
    "title": "Longitudinal Measurement Invariance",
    "section": "Strict Invariance",
    "text": "Strict Invariance\nUsing the lavaan package.\n\nstrict_model_lav <- (\"\n  # Measurement model\n  w1comp =~ w1vst1 + a*w1vst2 + b*w1vst3 # Factor loading equality constraint\n  w2comp =~ w2vst1 + a*w2vst2 + b*w2vst3 # Factor loading equality constraint\n\n  # Variances & covariances\n  w2comp ~~ w1comp\n\n  w1comp ~~ c*w1comp # Factor variance equality constraint\n  w2comp ~~ c*w2comp # Factor variance equality constraint\n\n  w1vst1 ~~ w2vst1\n  w1vst2 ~~ w2vst2\n  w1vst3 ~~ w2vst3\n\n  w1vst1 ~~ d*w1vst1 # Measurement residual equality constraint\n  w1vst2 ~~ e*w1vst2 # Measurement residual equality constraint\n  w1vst3 ~~ f*w1vst3 # Measurement residual equality constraint\n\n  w2vst1 ~~ d*w2vst1 # Measurement residual equality constraint\n  w2vst2 ~~ e*w2vst2 # Measurement residual equality constraint\n  w2vst3 ~~ f*w2vst3 # Measurement residual equality constraint\n\")\n\nstrict_model_lav_fit <- sem(strict_model_lav, social_exchanges)\n\nUsing the semTools package.\n\nstrict_model_smt <- measEq.syntax(\n  configural.model = configural_model_smt,\n  longFacNames = longitudinal_factor_names,\n  ID.fac = \"std.lv\",\n  ID.cat = \"Wu.Estabrook.2016\",\n  long.equal = c(\"loadings\", \"lv.variances\", \"residuals\"),\n  data = social_exchanges\n)\nstrict_model_smt <- as.character(strict_model_smt)\n\nstrict_model_smt_fit <- sem(strict_model_smt, social_exchanges)\n\nCompare lavaan and semTools fit measures.\n\nfitMeasures(strict_model_lav_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#> 78.779 11.000  0.000  0.961  0.104\n\nfitMeasures(strict_model_smt_fit, c(\"chisq\", \"df\", \"pvalue\", \"cfi\", \"rmsea\"))\n\n#>  chisq     df pvalue    cfi  rmsea \n#> 78.779 11.000  0.000  0.961  0.104\n\n\nTest strict invariance.\n\nlavTestLRT(\n  configural_model_lav_fit,\n  weak_model_lav_fit,\n  strong_model_lav_fit,\n  strict_model_lav_fit\n)"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#section",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#section",
    "title": "Longitudinal Measurement Invariance",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#michael-mccarthy",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#michael-mccarthy",
    "title": "Longitudinal Measurement Invariance",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#comments",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#comments",
    "title": "Longitudinal Measurement Invariance",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#session-info",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#session-info",
    "title": "Longitudinal Measurement Invariance",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-11-23\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.269 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.1.0)\n lavaan      * 0.6-11  2022-03-31 [1] CRAN (R 4.1.2)\n semTools    * 0.5-5   2021-07-07 [1] CRAN (R 4.1.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.0)\n\n [1] /Users/Michael/Library/R/4.1/library\n [2] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#data",
    "href": "snippets/2021-11-01_longitudinal-measurement-invariance/index.html#data",
    "title": "Longitudinal Measurement Invariance",
    "section": "Data",
    "text": "Data\n\nDownload the data used in this post."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html",
    "href": "posts/2022-12-20_palettes/index.html",
    "title": "Introducing the palettes package",
    "section": "",
    "text": "I am proud to announce that version 0.1.0 of the palettes package is now on CRAN. palettes is an R package for working with colour vectors and colour palettes. I made it with three main goals in mind, each described in a vignette on the package website:\n\nTo provide a new family of colour classes (palettes_colour and palettes_palette) that always print as hex codes with colour previews.\nTo provide a comprehensive library of methods for working with colour vectors and colour palettes, including methods for ggplot2, gt, biscale, and other colour packages.\nTo make it easy for anyone to make their own colour palette package. Colour palette packages made with palettes exist solely for the purpose of distributing colour palettes and get access to all the features of palettes for free.\n\nIf you just want to jump in and start using palettes, you can install it from CRAN with:\ninstall.packages(\"palettes\")\nThe package website is the best place to start: https://mccarthy-m-g.github.io/palettes/index.html\nIf you want to learn more about why you should be using palettes, read on to learn more about the motivation of the package and how it makes working with colour vectors and colour palettes easy and fun for everyone."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#origins",
    "href": "posts/2022-12-20_palettes/index.html#origins",
    "title": "Introducing the palettes package",
    "section": "Origins",
    "text": "Origins\nThe origins of palettes start with a different (in purgatory) package, BPRDcolours, which I was inspired to make while reading Mike Mignola’s Hellboy comics. Every page of Hellboy is a masterclass in colour and contrast, and I thought it would be fun to bring those colours into R:\n\n\n\nHellboy promo poster by Mike Mignola\n\n\nSo how does one make a colour palette package in R? My answer now is to read the Creating a colour palette package vignette and make it with palettes. My answer then was to read the source code of several other colour palette packages, then reimplement the relevant functions in BPRDcolours. Not a great answer, but it’s the approach everyone else was using.\nI managed to put together a rough development version, but got sidetracked with other projects soon after and put BPRDcolours on hold. And so my mind was left to brew on a better way to go about this whole colour palette package thing."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#enter-palettes",
    "href": "posts/2022-12-20_palettes/index.html#enter-palettes",
    "title": "Introducing the palettes package",
    "section": "Enter palettes",
    "text": "Enter palettes\nOne year after development on BPRDcolours stopped, I started palettes.\nThe main motivation behind palettes was to standardize and simplify the process of making a colour palette package. No more reading through other’s source code to figure out how to store colours or make them work with ggplot2 plots. No more unnecessary code duplication. I wanted the process of shipping a set of hex colour codes in an R package to be as simple as, well… shipping a set of hex colour codes in an R package. Anything extra like ggplot2 functionality should come for free.\nA secondary motivation was to provide pretty printing of colour palettes, with colour previews next to the hex colour codes. This was inspired by packages like taylor and prismatic, which provide their own pretty printing methods for colours using the crayon package. palettes uses the cli package for pretty printing, which has superseded crayon."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#just-show-me-some-colour-palettes-already",
    "href": "posts/2022-12-20_palettes/index.html#just-show-me-some-colour-palettes-already",
    "title": "Introducing the palettes package",
    "section": "Just show me some colour palettes already!",
    "text": "Just show me some colour palettes already!\nOkay, okay.\n\nlibrary(palettes)\n\nColour classes in palettes come in two forms:\n\nColour vectors (palettes_colour), which are created by pal_colour()\nColour palettes (palettes_palette), which are created by pal_palette()\n\nColour vectors can be thought of as a base type for colours, and colour palettes are just (named) lists of colour vectors. To illustrate, let’s use some colours from the MetBrewer package.\npal_colour() is a nice way to create a colour vector.\n\njava <- pal_colour(c(\"#663171\", \"#cf3a36\", \"#ea7428\", \"#e2998a\", \"#0c7156\"))\njava\n#> <palettes_colour[5]>\n#> • #663171\n#> • #CF3A36\n#> • #EA7428\n#> • #E2998A\n#> • #0C7156\n\n\npal_palette() is a nice way to create named colour palettes.\n\nmetbrewer_palettes <- pal_palette(\n  egypt = c(\"#dd5129\", \"#0f7ba2\", \"#43b284\", \"#fab255\"),\n  java  = java\n)\nmetbrewer_palettes\n#> <palettes_palette[2]>\n#> $egypt\n#> <palettes_colour[4]>\n#> • #DD5129\n#> • #0F7BA2\n#> • #43B284\n#> • #FAB255\n#> \n#> $java\n#> <palettes_colour[5]>\n#> • #663171\n#> • #CF3A36\n#> • #EA7428\n#> • #E2998A\n#> • #0C7156\n\n\nplot() is a nice way to showcase colour vectors and colour palettes. The appearance of the plot depends on the input.\n\nplot(metbrewer_palettes)\n\n\n\n\nCasting and coercion methods are also available to turn other objects (like character vectors or lists) into colour vectors and colour palettes.\nYou can even cast colour vectors and colour palettes into tibbles.\n\nmetbrewer_tbl <- as_tibble(metbrewer_palettes)\nmetbrewer_tbl\n#> # A tibble: 9 × 2\n#>   palette colour   \n#>   <chr>   <colour> \n#> 1 egypt   • #DD5129\n#> 2 egypt   • #0F7BA2\n#> 3 egypt   • #43B284\n#> 4 egypt   • #FAB255\n#> 5 java    • #663171\n#> 6 java    • #CF3A36\n#> 7 java    • #EA7428\n#> 8 java    • #E2998A\n#> 9 java    • #0C7156\n\n\nThis is useful if you want to wrangle the colours with dplyr.\n\nlibrary(dplyr)\n\nmetbrewer_tbl <- slice(metbrewer_tbl, -8)\nmetbrewer_tbl\n#> # A tibble: 8 × 2\n#>   palette colour   \n#>   <chr>   <colour> \n#> 1 egypt   • #DD5129\n#> 2 egypt   • #0F7BA2\n#> 3 egypt   • #43B284\n#> 4 egypt   • #FAB255\n#> 5 java    • #663171\n#> 6 java    • #CF3A36\n#> 7 java    • #EA7428\n#> 8 java    • #0C7156\n\n\nThen go back to a colour palette with the deframe() function from tibble.\n\nlibrary(tibble)\n\nmetbrewer_tbl %>%\n  group_by(palette) %>%\n  summarise(pal_palette(colour)) %>%\n  deframe()\n#> <palettes_palette[2]>\n#> $egypt\n#> <palettes_colour[4]>\n#> • #DD5129\n#> • #0F7BA2\n#> • #43B284\n#> • #FAB255\n#> \n#> $java\n#> <palettes_colour[4]>\n#> • #663171\n#> • #CF3A36\n#> • #EA7428\n#> • #0C7156"
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#what-about-ggplot2-plots",
    "href": "posts/2022-12-20_palettes/index.html#what-about-ggplot2-plots",
    "title": "Introducing the palettes package",
    "section": "What about ggplot2 plots?",
    "text": "What about ggplot2 plots?\nJust use one of the scale_ functions!\n\nlibrary(ggplot2)\n\nhiroshige <- pal_colour(c(\n  \"#1e466e\", \"#376795\", \"#528fad\", \"#72bcd5\", \"#aadce0\",\n  \"#ffe6b7\", \"#ffd06f\", \"#f7aa58\", \"#ef8a47\", \"#e76254\"\n))\n\nggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() +\n  coord_cartesian(expand = FALSE) +\n  scale_fill_palette_c(hiroshige)\n\n\n\n\nThere are scale_ functions for discrete, continuous, and binned data, and you can pass additional arguments to them for further customization."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#im-sold.-how-do-i-make-a-colour-palette-package",
    "href": "posts/2022-12-20_palettes/index.html#im-sold.-how-do-i-make-a-colour-palette-package",
    "title": "Introducing the palettes package",
    "section": "I’m sold. How do I make a colour palette package?",
    "text": "I’m sold. How do I make a colour palette package?\nSee the Creating a colour palette package vignette, which works through an example package showing the steps needed to make a colour palette package with palettes.\nIf you do make a package with palettes, let me know through email or Mastodon! In the future I’d like to make a “palettesverse” to showcase and collect all the packages using palettes in one place."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#whats-next",
    "href": "posts/2022-12-20_palettes/index.html#whats-next",
    "title": "Introducing the palettes package",
    "section": "What’s next?",
    "text": "What’s next?\nIn future versions I would like to:\n\nProvide an option to choose the symbol used for colour previews\nAdd functions for manipulating colour palettes\nAdd an interpolation function for bivariate colour scales\nMake a better hex sticker (looking for help on this one!)\n\nIf you have other suggestions or requests, please file an issue on GitHub."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#section",
    "href": "posts/2022-12-20_palettes/index.html#section",
    "title": "Introducing the palettes package",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#michael-mccarthy",
    "href": "posts/2022-12-20_palettes/index.html#michael-mccarthy",
    "title": "Introducing the palettes package",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#comments",
    "href": "posts/2022-12-20_palettes/index.html#comments",
    "title": "Introducing the palettes package",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "posts/2022-12-20_palettes/index.html#session-info",
    "href": "posts/2022-12-20_palettes/index.html#session-info",
    "title": "Introducing the palettes package",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-21\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.10  2022-09-01 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.0   2022-11-04 [1] CRAN (R 4.2.0)\n palettes    * 0.1.0   2022-12-19 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html",
    "href": "posts/2021-06-15_demons-souls/index.html",
    "title": "Go forth, slayer of Demons",
    "section": "",
    "text": "On the first day\nMan was granted a soul\nAnd with it, clarity\nOn the second day\nupon Earth was planted\nan irrevocable poison\nA soul-devouring demon\n\nDemon’s Souls is an action role-playing video game set in the dark fantasy kingdom of Boletaria, a land cursed with a deep, terrible fog brought forth by an ancient soul-devouring demon called the Old One. To lift the curse and mend the world players must slay and absorb the souls of five powerful archdemons, whereafter they can face the Old One and lull it back to slumber. Demon’s Souls is renowned for its challenge and design, and has made a lasting impact on the video game industry. It is also the progenitor of what has become one of my favourite video game franchises."
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#theming-inspiration",
    "href": "posts/2021-06-15_demons-souls/index.html#theming-inspiration",
    "title": "Go forth, slayer of Demons",
    "section": "Theming Inspiration",
    "text": "Theming Inspiration\nHero text appears on the screen whenever the player performs a significant action in Demon’s Souls, such as slaying a demon or, infamously, dying themselves. These provide a great design reference for plot theming.\n\n\n\n\n\n\n\n\nIn-game screenshots of the hero text from Demon’s Souls.\n\n\n\n\nDemon’s Souls also has a unique logo whose design I want to reference.\n\n\n\n\n\nThe Demon’s Souls logo.\n\n\n\n\nI want to translate these design elements to my plot like so:\n\nThe Optimus Princeps font can be used for plot text.\nThe yellow and red colours for the hero text can be used to contrast successes and failures, respectively.\nThe distressed, broken style of the Demon’s Souls logo can be used for the plot’s title.\n\nApplying these elements to my plot will help it fit the Demon’s Souls aesthetic."
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#prerequisites",
    "href": "posts/2021-06-15_demons-souls/index.html#prerequisites",
    "title": "Go forth, slayer of Demons",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nlibrary(tidyverse)\nlibrary(ggfx)\nlibrary(magick)\n\nI’ll be using PlayStation Network trophy data for my plot. The data contains statistics for the percent of players who have slain a given boss in Demon’s Souls out of all the players who have ever played the game. I have constructed the data manually since Sony does not provide an API to access PlayStation Network trophy data programmatically. Demon’s Souls was released on February 5, 2009, so it is unlikely these stats will change much in the future.\n\n# Tribbles are not just useful for scaring Klingons, they make it easy to\n# create tibbles too\ndemons_souls <- tribble(\n  ~boss,            ~boss_type,  ~location,              ~archstone, ~percent_completed,\n  \"Phalanx\",        \"Demon\",     \"Boletarian Palace\",    \"1-1\",      63.1,               \n  \"Tower Knight\",   \"Demon\",     \"Boletarian Palace\",    \"1-2\",      46.6,               \n  \"Penetrator\",     \"Demon\",     \"Boletarian Palace\",    \"1-3\",      30.3,               \n  \"False King\",     \"Archdemon\", \"Boletarian Palace\",    \"1-4\",      24.2,               \n  \"Armor Spider\",   \"Demon\",     \"Stonefang Tunnel\",     \"2-1\",      43.9,               \n  \"Flamelurker\",    \"Demon\",     \"Stonefang Tunnel\",     \"2-2\",      35.1,               \n  \"Dragon God\",     \"Archdemon\", \"Stonefang Tunnel\",     \"2-3\",      33.1,               \n  \"Fool’s Idol\",    \"Demon\",     \"Tower of Latria\",      \"3-1\",      35.7,               \n  \"Maneater\",       \"Demon\",     \"Tower of Latria\",      \"3-2\",      28.7,               \n  \"Old Monk\",       \"Archdemon\", \"Tower of Latria\",      \"3-3\",      27.7,               \n  \"Adjudicator\",    \"Demon\",     \"Shrine of Storms\",     \"4-1\",      36.1,               \n  \"Old Hero\",       \"Demon\",     \"Shrine of Storms\",     \"4-2\",      28.8,               \n  \"Storm King\",     \"Archdemon\", \"Shrine of Storms\",     \"4-3\",      28.1,               \n  \"Leechmonger\",    \"Demon\",     \"Valley of Defilement\", \"5-1\",      32.5,               \n  \"Dirty Colossus\", \"Demon\",     \"Valley of Defilement\", \"5-2\",      27.2,               \n  \"Maiden Astraea\", \"Archdemon\", \"Valley of Defilement\", \"5-3\",      26.6\n) %>%\n  mutate(across(boss_type:archstone, as_factor))\n\ndemons_souls"
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#wrangle",
    "href": "posts/2021-06-15_demons-souls/index.html#wrangle",
    "title": "Go forth, slayer of Demons",
    "section": "Wrangle",
    "text": "Wrangle\nThe data is already structured the way I want it for my plot, but there are still some interesting things to explore through wrangling and summary stats.\nWithin each location, players have to slay each demon in the order specified by the archstones. For example, in the Boletarian Palace a player cannot face the Tower Knight before they have slain the Phalanx. So each location has a first, second, and third boss (and the Boletarian Palace has a fourth that can only be faced after slaying all the other demons). This can be used to get an imperfect idea of player attrition in the game.\n\n# Detect the order of bosses based on archstone suffix\ndemons_souls <- demons_souls %>%\n  mutate(\n    archstone_boss = case_when(\n      str_detect(archstone, \"-1\") ~ \"First\",\n      str_detect(archstone, \"-2\") ~ \"Second\",\n      str_detect(archstone, \"-3\") ~ \"Third\",\n      str_detect(archstone, \"-4\") ~ \"Fourth (False King)\"\n    ),\n    archstone_boss = as_factor(archstone_boss),\n    .after = archstone\n  )\n\ndemons_souls\n\n\n\n  \n\n\n\nNow, there are two ways to go about getting this imperfect idea of player attrition in the game. The first involves using the entire data set.\n\n# Calculate the average percent of players who have slain the first, second,\n# ..., archstone boss across locations. \ndemons_souls %>%\n  group_by(archstone_boss) %>%\n  summarise(average_completed = mean(percent_completed))\n\n\n\n  \n\n\n\nThe second involves removing the Phalanx from the data set due to its influential pull on the average for the first archstone boss. It has a much higher completion percent (63.1%) than the other bosses in the game, and the reason for this is that the Phalanx is the first boss in the game. Players must slay it before they can go to face the first archstone boss from other locations in the game. Removing the Phalanx might give a more accurate picture of average completion for first archstone bosses.\n\n# Trophy earned: Slayer of Demon \"Phalanx\"\ndemons_souls %>%\n  filter(boss != \"Phalanx\") %>%\n  group_by(archstone_boss) %>%\n  summarise(average_completed = mean(percent_completed))\n\n\n\n  \n\n\n\nWith the Phalanx’s influence removed, it looks like there is roughly a 4% drop in average completion for each successive archstone boss. In order to face the False King players must first slay every other demon and archdemon in the game, so it is interesting the drop stays consistent there. Most players who made it far enough to slay their first archdemon then went on to slay the rest.\n\n\nUmbassa.\nAbout one quarter of Demon’s Souls players persisted to the end of the game. But three quarters did not. Assuming most players at least attempted each location, then averaging by location can give an imperfect idea of their overall difficulty for players during their first playthrough.\n\n# Calculate the average completion rate by location, arranged from \"easiest\" to\n# \"hardest\"\ndemons_souls %>%\n  group_by(location) %>%\n  summarise(average_completed = mean(percent_completed)) %>%\n  arrange(desc(average_completed))\n\n\n\n  \n\n\n\nIt looks like there are two clusters here, an easier one with the Boletarian Palace and Stonefang Tunnel, and a harder one with Shrine of Storms, Tower of Latria, and the Valley of Defilement. I finished my first playthrough of the game in 2012, so I only have distant memories to reflect on, but this ranking looks sound to me. For experienced players I think this ranking is less relevant. Once you’re experienced most of the variability in difficulty comes down to the character build you choose."
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#visualize",
    "href": "posts/2021-06-15_demons-souls/index.html#visualize",
    "title": "Go forth, slayer of Demons",
    "section": "Visualize",
    "text": "Visualize\n\n# Define aliases for plot fonts and colours\noptimus <- \"OptimusPrinceps\"\noptimus_b <- \"OptimusPrincepsSemiBold\"\nyellow <- \"#ffaf24\" #  #fec056\n\nThe plot I want to make is inspired by this Tidy Tuesday plot by Georgios Karamanis. I used Georgios’ code as a starting point, then modified it to get the behaviour and result I wanted.\nThe centrepiece of the plot is the coloured text that shows the percent of Demon’s Souls players who have completed a given boss in yellow and who have not in red. This effect is achieved by applying a rectangular filter over the text that only allows the portion of the text within the filter’s borders to be shown. Doing this once for yellow text and once for red text allows the full string to appear, with the ratio of colours within a boss’s name reflecting the percent of players that have completed it. A few calculations are needed in order for the ratios to be accurate, and for the text to look aesthetically pleasing.\n\ndemons_souls_plot <- demons_souls %>%\n  mutate(\n    # Percentages need to be in decimal form for the calculations and plotting\n    # to work properly\n    percent_completed = percent_completed/100,\n    boss = fct_reorder(toupper(boss), percent_completed),\n    # In order to justify text to the same width, a ratio of how many times\n    # each string would fit into the widest string needs to be calculated. This\n    # can then be multiplied by an arbitrary value to determine the final size\n    # for each string of text.\n    str_width = strwidth(boss, family = optimus_b, units = \"inches\") * 25.4, # in millimetres\n    str_ratio = max(str_width)/str_width,\n    text_size = 4.9 * str_ratio,\n    # The division here is arbitrary, its effect is reflected in the scale of the\n    # y-axis\n    tile_height = text_size / 10\n  ) %>%\n  # Bosses will appear from top to bottom based on completion ratios. The\n  # calculation here accounts for the differences in text size for each string.\n  arrange(percent_completed) %>%\n  mutate(y = cumsum(lag(tile_height/2, default = 0) + tile_height/2))\n\nNow the plot can be constructed. The final code for the plot is roughly 100 lines long, so I’ve hidden it in the section below. However, there are a few parts of the code I want to highlight before showing the final plot.\n\n\nShow Code\n# The trick for geom spacing is to set the size of the plot from the start\nfile <- tempfile(fileext = '.png')\nragg::agg_png(file, width = 4, height = 5.5, res = 300, units = \"in\")\n\nggplot(demons_souls_plot) +\n  # Make it easier to see where 50% is using a vertical line. geom_segment() is\n  # used here instead of geom_vline() because the latter goes up into the title\n  # text. An empty data frame is supplied so that only one copy of the geom is\n  # drawn.\n  geom_segment(aes(\n    x = 0,\n    xend = 0,\n    y = 10.9,\n    yend = 0,\n    size = 0.6),\n    data = data.frame(),\n    alpha = 0.3,\n    colour = \"grey\",\n    lineend = \"round\",\n    linetype = \"twodash\"\n  ) +\n  scale_alpha_identity() +\n  \n  # Set bounding box for yellow portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = -0.5,\n      xmax = -0.5 + ((percent_completed)),\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"demon_vanquished\"\n  ) +\n  # Only show the portion of yellow centrepiece text located within the\n  # bounding box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = yellow,\n    family = optimus_b),\n    bg_layer = \"demon_vanquished\",\n    blend_type = \"in\"\n  ) +\n  # Set bounding box for red portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = 0.5 - ((1 - percent_completed)),\n      xmax = 0.5,\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"you_died\"\n  ) +\n  # Only show the portion of red centrepiece text located within the bounding\n  # box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = \"red\",\n    family = optimus_b),\n    bg_layer = \"you_died\",\n    blend_type = \"in\"\n  ) +\n  \n  # Draw \"axis\" for Demon Vanquished\n  annotate(\n    \"text\",\n    x = -0.65,\n    y = 7.75,\n    label = \"demon vanquished\",\n    angle = 90,\n    size = 5,\n    family = optimus,\n    colour = yellow\n  ) +\n  geom_segment(aes(\n    x = -0.645,\n    xend = -0.645,\n    y = 10.05,\n    yend = 10.45),\n    lineend = \"round\",\n    colour = yellow,\n    size = 0.3,\n    arrow = arrow(angle = 45, length = unit(1, \"mm\"), type = \"open\")\n  ) +\n  # Draw \"axis\" for You Died\n  annotate(\n    \"text\",\n    x = 0.65,\n    y = 4.65,\n    label = \"you died\",\n    angle = 270,\n    size = 5,\n    family = optimus,\n    colour = \"red\"\n  ) +\n  geom_segment(aes(\n    x = 0.645,\n    xend = 0.645,\n    y = 3.51,\n    yend = 3.01),\n    lineend = \"round\",\n    colour = \"red\",\n    size = 0.3,\n    arrow = arrow(angle = 45, length = unit(1, \"mm\"), type = \"open\")\n  ) +\n  \n  # Draw a title surrounded by line decorations at the top of the panel\n  geom_segment(aes(\n    x = -0.75,\n    xend = 0.75,\n    y = 13.2,\n    yend = 13.2,\n    size = 0.3),\n    lineend = \"round\",\n    colour = \"grey\"\n  ) +\n  annotate(\n    \"text\",\n    x = 0,\n    y = 12.325,\n    size = 7,\n    family = optimus_b,\n    colour = \"white\",\n    lineheight = 0.75,\n    label = \"DEMON’S SOULS\\nBOSS COMPLETION\"\n  ) +\n  geom_segment(aes(\n    x = -0.025,\n    xend = -0.75,\n    y = 11.4,\n    yend = 11.4,\n    size = 0.3),\n    lineend = \"round\",\n    colour = \"grey\"\n  ) +\n  geom_segment(aes(\n    x = 0.025,\n    xend = 0.75,\n    y = 11.4,\n    yend = 11.4,\n    size = 0.3),\n    lineend = \"round\",\n    colour = \"grey\"\n  ) +\n  annotate(\n    \"point\",\n    x  = 0,\n    y = 11.4,\n    colour = \"grey\",\n    shape = 5,\n    size = 2,\n    stroke = 0.6\n  ) +\n  annotate(\n    \"point\",\n    x  = 0,\n    y = 11.4,\n    colour = \"grey\",\n    shape = 5,\n    size = 0.75\n  ) +\n  \n  # Draw plot caption\n  annotate(\n    \"text\",\n    x = 1,\n    y = 10.33,\n    angle = 270,\n    hjust = 0,\n    size = 3,\n    alpha = 0.3,\n    label = \"SOURCE: PLAYSTATION NETWORK | GRAPHIC: MICHAEL MCCARTHY\",\n    family = optimus,\n    color = \"grey\"\n  ) +\n  \n  # Make sure the text size calculated for each string is used so that strings\n  # are justified\n  scale_size_identity() +\n  # Take axis limits exactly from data so there's no spacing around the panel,\n  # allow drawing outside of the panel for annotations, and set the axis limits\n  # to match the limits of the text.\n  coord_cartesian(expand = FALSE, clip = \"off\", xlim = c(-0.5, 0.5)) +\n  # Specify the panel size manually. This makes it easier to position plot\n  # elements with absolute positions.\n  ggh4x::force_panelsizes(rows = unit(5, \"in\"), # height\n                          cols = unit(1.8, \"in\")) + # width\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = unit(c(0.5, 4, 0.5, 4), \"in\"),\n    plot.background = element_rect(fill = \"black\", color = NA))\n\ninvisible(dev.off())\n\n# Apply a mask texture to the final image to mimic the style of the Demon's\n# Souls logo in the plot title\nmask <- image_read(\n  here(\"posts\", \"2021-06-15_demons-souls\", \"images\", \"texture.png\")\n  ) %>%\n  image_transparent(\"white\") %>%\n  image_threshold(\"black\", \"90%\")\n\nfinal_plot <- image_composite(image_read(file), mask, operator = \"Over\")\n\n\nFirst, the code behind the coloured centrepiece text. It uses ggfx::as_reference() and ggfx::with_blend() to selectively apply a filter over portions of the text, as I discussed earlier. The boundaries of the filter are defined by the ggplot2 geom inside of ggfx::as_reference(), then ggfx::with_blend() applies a filter specified by blend_type to the ggplot2 geom inside of it. By duplicating this process twice—once for yellow text and again for red text—but with different filter boundaries based on the percent completed and not completed, the entire boss name is displayed with accurate colour fills.\n\n  # Set bounding box for yellow portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = -0.5,\n      xmax = -0.5 + ((percent_completed)),\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"demon_vanquished\"\n  ) +\n  # Only show the portion of yellow centrepiece text located within the\n  # bounding box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = yellow,\n    family = optimus_b),\n    bg_layer = \"demon_vanquished\",\n    blend_type = \"in\"\n  ) +\n   # Set bounding box for red portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = 0.5 - ((1 - percent_completed)),\n      xmax = 0.5,\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"you_died\"\n  ) +\n  # Only show the portion of red centrepiece text located within the bounding\n  # box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = \"red\",\n    family = optimus_b),\n    bg_layer = \"you_died\",\n    blend_type = \"in\"\n  )\n\nSecond, the code behind the distressed, broken style of the title text. This one is actually quite simple. It uses magick::image_composite() to apply a texture mask I made in Krita over the composed plot. The mask has a transparent background with black lines located over the space where the plot title is. Both the composed plot and mask images have the same dimensions, so when they’re composed together the effect is applied exactly where I want it.\n\nimage_composite(plot, mask, operator = \"Over\")\n\nFinally, I just wanted to note that the decorative lines around the plot’s title text are actually made up of ggplot2 geoms. I used two ggplot2::geom_point() geoms with different sizes to create the diamond on the bottom line."
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#final-graphic",
    "href": "posts/2021-06-15_demons-souls/index.html#final-graphic",
    "title": "Go forth, slayer of Demons",
    "section": "Final Graphic",
    "text": "Final Graphic"
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#section",
    "href": "posts/2021-06-15_demons-souls/index.html#section",
    "title": "Go forth, slayer of Demons",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#michael-mccarthy",
    "href": "posts/2021-06-15_demons-souls/index.html#michael-mccarthy",
    "title": "Go forth, slayer of Demons",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#comments",
    "href": "posts/2021-06-15_demons-souls/index.html#comments",
    "title": "Go forth, slayer of Demons",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#session-info",
    "href": "posts/2021-06-15_demons-souls/index.html#session-info",
    "title": "Go forth, slayer of Demons",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-21\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.10  2022-09-01 [1] CRAN (R 4.2.0)\n forcats     * 0.5.2   2022-08-19 [1] CRAN (R 4.2.0)\n ggfx        * 1.0.1   2022-08-22 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.0   2022-11-04 [1] CRAN (R 4.2.0)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.2.0)\n magick      * 2.7.3   2021-08-18 [1] CRAN (R 4.2.0)\n purrr       * 0.3.5   2022-10-06 [1] CRAN (R 4.2.0)\n readr       * 2.1.3   2022-10-01 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.0)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.1   2022-09-08 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.2   2022-07-18 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#data",
    "href": "posts/2021-06-15_demons-souls/index.html#data",
    "title": "Go forth, slayer of Demons",
    "section": "Data",
    "text": "Data\n\nDownload the data used in this post."
  },
  {
    "objectID": "posts/2021-06-15_demons-souls/index.html#fair-dealing",
    "href": "posts/2021-06-15_demons-souls/index.html#fair-dealing",
    "title": "Go forth, slayer of Demons",
    "section": "Fair Dealing",
    "text": "Fair Dealing\n\nAny of the trademarks, service marks, collective marks, design rights or similar rights that are mentioned, used, or cited in this article are the property of their respective owners. They are used here as fair dealing for the purpose of education in accordance with section 29 of the Copyright Act and do not infringe copyright."
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html",
    "href": "posts/2022-06-16_projectile-motion/index.html",
    "title": "On motion",
    "section": "",
    "text": "Projectile motion describes the motion of an object launched into the air whose trajectory after launch is influenced only by the force of gravity and for which air resistance is negligible. Projectile motion was first accurately described by Galileo Galilei in his book Two New Sciences, published in 1638. In what he dubbed compound motion, Galileo demonstrated that projectile motion can be broken down into independent horizontal and vertical components that can be analyzed separately to describe an object’s trajectory. He used this principle to prove that the trajectory of an object in projectile motion will always follow a curve in the shape of a parabola.\n\n\n\n\n\nProjectile motion of an object launched at the same height and velocity but different angles. The symmetrical U-shaped curve of each trajectory is known as a parabola.\n\n\n\n\nGalileo used an inclined plane to demonstrate his principle of compound motion. I’m going to use R."
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#post-inspiration",
    "href": "posts/2022-06-16_projectile-motion/index.html#post-inspiration",
    "title": "On motion",
    "section": "Post Inspiration",
    "text": "Post Inspiration\nI recently finished Outer Wilds, an open world adventure game set in a strange, constantly evolving solar system trapped in an endless time loop. It’s a great game and I really enjoyed solving the mysteries of the solar system. The reason I bring it up here is that, on top of being a great game, the physics realism of Outer Wilds is something that really stood out to me.\nFor instance, at the start of the game there’s a museum exhibit consisting of a low table and three gently rolling balls that appear to move around on their own.\n\n\nEmphasis on gently. Wait for it…\n\n\n  Your browser does not support the video tag;  for browser support, please see:  https://www.w3schools.com/tags/tag_video.asp \n\n\nBut the balls are not actually moving on their own. Their motion is being affected by the moon’s gravity. As the placard beside them explains: “As it orbits our planet, the Attlerock’s gravity pulls on objects from different directions. In fact, it’s pulling on you right now!” This isn’t just flavour text—the game is actually simulating planetary gravity.\nOuter Wilds uses its physics realism to great effect in other parts of the game (ever wondered what it’s like to stand on planet while it breaks apart into a black hole?), and experiencing it all got me curious: What kinds of physics simulations could I do in the two-dimensional space of a plot? After some research and reading I landed on projectile motion."
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#prerequisites",
    "href": "posts/2022-06-16_projectile-motion/index.html#prerequisites",
    "title": "On motion",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(ggh4x)\nlibrary(formattable)\nlibrary(emojifont)\nlibrary(glue)\n\nI’ll be simulating data for my plot by turning the equations for projectile motion into R functions. You can download this data with the Data Source link in the appendix. The sources I used for the equations can also be found in the appendix."
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#simulate",
    "href": "posts/2022-06-16_projectile-motion/index.html#simulate",
    "title": "On motion",
    "section": "Simulate",
    "text": "Simulate\nThe equations for projectile motion use a common set of variables which are listed below. The equations assume that the force of air resistance is negligible\n\\[\n\\begin{align}\nV &\\leftarrow \\textrm{initial velocity}, \\\\\nV_x &\\leftarrow \\textrm{horizontal velocity}, \\\\\nV_y &\\leftarrow \\textrm{vertical velocity}, \\\\\n\\alpha &\\leftarrow \\textrm{launch angle}, \\\\\nh &\\leftarrow \\textrm{initial height}, \\\\\nt &\\leftarrow \\textrm{time of flight}, \\\\\nd &\\leftarrow \\textrm{distance (range)}, \\\\\nh_{\\textrm{max}} &\\leftarrow \\textrm{maximum height}, \\\\\ng &\\leftarrow \\textrm{gravity}.\n\\end{align}\n\\]\n\nHorizontal and vertical velocity\nThe horizontal velocity, \\(V_x\\), and vertical velocity, \\(V_y\\), of an object moving in projectile motion are given by the equations\n\\[\n\\begin{align}\nV_x &= V \\times \\cos(\\alpha), \\textrm{ and} \\\\\nV_y &= V \\times \\sin(\\alpha),\n\\end{align}\n\\]\nwhere \\(V\\) is the initial velocity and \\(\\alpha\\) is the launch angle. Horizontal and vertical velocity can be computed in R with the following functions.\n\nvelocity_x <- function(velocity, angle) {\n  # Degrees need to be converted to radians in cos() since that is what the\n  # function uses\n  velocity * cos(angle * (pi/180))\n}\n\nvelocity_y <- function(velocity, angle) {\n  # Degrees need to be converted to radians in sin() since that is what the\n  # function uses\n  velocity * sin(angle * (pi/180))\n}\n\n\n\nTime of flight\nThe time of flight, \\(t\\), of an object moving in projectile motion is given by the equation\n\\[\nt = \\left(V_y + \\sqrt{V_y^2 + 2 \\times g \\times h}\\right) \\div g,\n\\]\nwhere \\(V_y\\) is the vertical velocity, \\(g\\) is the force of gravity, and \\(h\\), is the initial height the object is launched from. Time of flight is the time from when the object is launched to the time the object reaches the surface. It can be computed in R with the following function.\n\nflight_time <- function(velocity_y, height, gravity = 9.80665) {\n  ( velocity_y + sqrt(velocity_y^2 + 2 * gravity * height) ) / gravity\n}\n\n\n\nDistance (range)\nThe distance, \\(d\\), or range travelled by an object moving in projectile motion is given by the equation\n\\[\nd = V_x \\times t,\n\\]\nwhere \\(V_x\\) is the horizontal velocity and \\(t\\) is the time of flight. The range of the projectile is the total horizontal distance travelled during the time of flight. It can be computed in R with the following function.\n\ndistance <- function(velocity_x, velocity_y, height, gravity = 9.80665) {\n  velocity_x * ( velocity_y + sqrt(velocity_y^2 + 2 * gravity * height) ) /\n  gravity\n}\n\n\n\nMaximum height\nThe maximum height, \\(h_{\\textrm{max}}\\), reached by an object moving in projectile motion is given by the equation\n\\[\nh_{\\textrm{max}} = h + V_y^2 \\div (2 \\times g),\n\\]\nwhere \\(h\\) is the initial height, \\(V_y\\) is the vertical velocity, and \\(g\\) is the force of gravity. The maximum height is reached when \\(V_y = 0\\). It can be computed in R with the following function.\n\nheight_max <- function(velocity_y, height, gravity = 9.80665) {\n  height + velocity_y^2 / (2 * gravity)\n}\n\n\n\nProjectile motion calculator\nNow to wrap all the components into a single function that will calculate the result for each component based on a set of parameters given to it. These results can then be used to determine the position and velocity of the projectile at any point in time during its trajectory, which I want to return as a data frame that can be used for plotting.\n\n#' nframes and fps can be used to animate the trajectory as close to real time as possible.\n#' There will be some rounding error though so it won't be exactly the same as the flight\n#' time.\nprojectile_motion <- function(velocity, angle, height, gravity = 9.80665, nframes = 30) {\n  \n  # Velocity components\n  vx <- velocity_x(velocity, angle)\n  vy <- velocity_y(velocity, angle)\n  # Flight components\n  t  <- flight_time(vy, height, gravity)\n  d  <- distance(vx, vy, height, gravity)\n  # Max height components\n  hm <- height_max(vy, height, gravity)\n  th <- vy / gravity\n  hd <- vx * th\n  \n  # Calculate the position of the projectile in 2D space at a given point in\n  # time to approximate its trajectory over time\n  x_pos <- map_dbl(seq(0, t, length = nframes), ~ {\n    vx * .x\n  })\n  \n  y_pos <- map_dbl(seq(0, t, length = nframes), ~ {\n    height + ( vy * .x + 0.5 * -gravity * .x^2 )\n  })\n  \n  # Calculate the vertical velocity of the projectile at a given point in time\n  vy_t  <- map_dbl(seq(0, t, length = nframes), ~ {\n    vy - gravity * .x\n  })\n  \n  trajectory <- data.frame(\n    x = x_pos,\n    y = y_pos,\n    vx = vx,\n    vy = vy_t,\n    second = seq(0, t, length = nframes)\n  )\n  \n  # Return a list with all calculated values\n  list(\n    velocity_x = vx,\n    velocity_y = vy,\n    flight_time = t,\n    distance = d,\n    max_height = hm,\n    max_height_time = th,\n    max_height_dist = hd,\n    trajectory = trajectory,\n    nframes = nframes,\n    fps = nframes/t\n  )\n  \n}"
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#wrangle",
    "href": "posts/2022-06-16_projectile-motion/index.html#wrangle",
    "title": "On motion",
    "section": "Wrangle",
    "text": "Wrangle\nInstead of jumping straight into a visualization, I want to play around with the output of projectile_motion(). First to show what its output looks like, and second to explore the interesting ways it can be extended through wrangling.\n\nA simple trajectory\nFirst off, demonstrating projectile_motion() and its output. The function takes five arguments:\n\nvelocity in metres per second,\nangle in degrees,\nheight in metres per second,\ngravity in metres per second (this defaults to Earth’s gravity, 9.80665 m/s), and\nnframes which represents how many points in time to record in the trajectory data frame.\n\n\nprojectile_motion(\n  velocity = 11.4,\n  angle = 52.1,\n  height = 18,\n  nframes = 10\n)\n\n#> $velocity_x\n#> [1] 7.002851\n#> \n#> $velocity_y\n#> [1] 8.995559\n#> \n#> $flight_time\n#> [1] 3.041533\n#> \n#> $distance\n#> [1] 21.29941\n#> \n#> $max_height\n#> [1] 22.12578\n#> \n#> $max_height_time\n#> [1] 0.9172917\n#> \n#> $max_height_dist\n#> [1] 6.423657\n#> \n#> $trajectory\n#>            x            y       vx          vy    second\n#> 1   0.000000 1.800000e+01 7.002851   8.9955586 0.0000000\n#> 2   2.366601 2.048003e+01 7.002851   5.6814194 0.3379481\n#> 3   4.733201 2.184005e+01 7.002851   2.3672802 0.6758963\n#> 4   7.099802 2.208006e+01 7.002851  -0.9468589 1.0138444\n#> 5   9.466402 2.120007e+01 7.002851  -4.2609981 1.3517926\n#> 6  11.833003 1.920007e+01 7.002851  -7.5751373 1.6897407\n#> 7  14.199604 1.608006e+01 7.002851 -10.8892765 2.0276889\n#> 8  16.566204 1.184005e+01 7.002851 -14.2034156 2.3656370\n#> 9  18.932805 6.480029e+00 7.002851 -17.5175548 2.7035852\n#> 10 21.299405 3.552714e-15 7.002851 -20.8316940 3.0415333\n#> \n#> $nframes\n#> [1] 10\n#> \n#> $fps\n#> [1] 3.287815\n\n\nThe function returns calculations for each of the projectile motion equations I covered above, as well as some additional output that can be used for plotting and animation:\n\nmax_height_time and max_height_dist give the time (s) and distance (m) it takes for the projectile to reach its maximum height.\ntrajectory gives the horizontal and vertical position and velocity at a given moment during the projectile’s trajectory.\nfps gives the number of frames per second that are needed to animate the trajectory in real time based on nframes. Because it is impossible to have a fraction of a frame there will be variance in how closely an animation’s duration matches the actual time of flight based on the value of nframes.\n\n\n\nLaunching a projectile on different planets\nGiven the inspiration for this post, a space themed simulation seems appropriate. Here I want to test how the gravity of each planet in our solar system influences projectile motion, given a projectile is launched with the same velocity, angle, and height.\nFirst I need to construct a named vector of the gravity of each planet in our solar system. NASA provides these values came as ratios of each planet’s gravity relative to Earth, so I had to multiply each one by Earth’s gravity to get the units correct.\n\n# All values are in metres per second\nplanets <- c(\n  mercury = 3.7069137,\n  venus   = 8.8946315,\n  earth   = 9.80665,\n  moon    = 1.6279039,\n  mars    = 3.697107,\n  jupiter = 23.143694,\n  saturn  = 8.9828914,\n  uranus  = 8.7181118,\n  neptune = 10.983448,\n  pluto   = 0.6962721\n)\n\nThen I can create a named list of projectile motion calculations, one for each planet. Each planet has its own list of output from projectile_motion(), so the resulting list of projectile motion calculations is actually a list of lists. This can be tidied into a tibble to make it easier to work with.\n\n# Calculate projectile motion for each planet, given the same velocity,\n# angle, and height\nplanets_pm <- map(planets, ~{\n  projectile_motion(\n    velocity = 20,\n    angle = 45,\n    height = 35,\n    gravity = .x,\n    nframes = 100)\n})\n\n# Tidying the list of lists into a tibble makes it easier to work with. Note\n# that the trajectory column is a list column since it contains the trajectory\n# data frame for each planet.\nplanets_df <- planets_pm %>%\n  enframe() %>%\n  unnest_wider(value) %>%\n  rename(planet = name)\n\nplanets_trajectory <- planets_df %>%\n  select(planet, trajectory) %>%\n  unnest(trajectory) %>% \n  mutate(planet = factor(planet, levels = names(planets)))"
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#visualize",
    "href": "posts/2022-06-16_projectile-motion/index.html#visualize",
    "title": "On motion",
    "section": "Visualize",
    "text": "Visualize\nNow for visualization. First I’ll plot a simple trajectory, then a projectile launched on different planets.\n\nA simple trajectory\nThis is the same simple trajectory I showed the output for earlier, only with more frames to make the animation smoother.\n\nsimple_trajectory <- projectile_motion(\n  velocity = 11.4,\n  angle = 52.1,\n  height = 18,\n  nframes = 100\n)\n\n# Assign the data frame and max height parameters to objects to make the plot\n# code easier to read\ndf <- simple_trajectory$trajectory\nmax_height_dist <- simple_trajectory$max_height_dist\nmax_height_time <- simple_trajectory$max_height_time\nmax_height <- simple_trajectory$max_height\n\nI’m going to build the plot for this simple trajectory up in chunks to make the code easier to understand. The foundation of the plot is fairly standard. The only unusual thing here are the group aesthetics in geom_line() and geom_point(). These are used to tell gganimate which rows in the data correspond to the same graphic element.\n\np <- ggplot(df, aes(x = x, y = y)) +\n  geom_line(\n    aes(group = 1),\n    linetype = \"dashed\",\n    colour = \"red\",\n    alpha = 0.5\n  ) +\n  geom_point(aes(group = 1), size = 2)\n\nFor the data I simulated, the projectile starts with a positive vertical velocity. However, at its maximum height, the vertical velocity of the projectile becomes 0 m/s for a brief moment, as it stops rising and starts falling. This happens Because gravity is constantly influencing the vertical velocity of the projectile. This is an important and interesting piece of information I want to communicate in my plot. This can be accomplished subtly by displaying the vertical velocity of the projectile at each point in time, or more overtly using a text annotation. I’m going to do both.\nFirst the text annotation. I’m using geom_curve() to draw an arrow between the annotation and the point at which the projectile is at its maximum height, and geom_text() to draw the annotation. I’ve supplied each geom with its own data frame containing a second column whose sole value corresponds to the time the projectile reaches its maximum height. This will control when the annotation appears in the animation. I’ve also given the pair a different group aesthetic from geom_line() and geom_point().\n\np <- p +\n  geom_curve(\n    data = data.frame(\n      second = max_height_time\n    ),\n    aes(\n      xend = max_height_dist,\n      yend = max_height + 0.2,\n      x = max_height_dist + 2,\n      y = max_height + 2,\n      group = 2\n    ),\n    curvature = 0.45,\n    angle = 105,\n    ncp = 15,\n    arrow = arrow(length = unit(0.1,\"cm\"), type = \"closed\")\n  ) +\n  geom_text(\n    data = data.frame(\n      second = max_height_time\n    ),\n    aes(\n      x = max_height_dist + 2.4,\n      y = max_height + 2,\n      group = 2\n    ),\n    hjust = \"left\",\n    lineheight = 1,\n    family = \"serif\",\n    label = str_c(\n      \"At its maximum height, the vertical velocity \\n\", \n      \"of the projectile is 0 m/s for a brief moment, \\n\",\n      \"as it stops rising and starts falling.\"\n    )\n  )\n\nSecond the vertical velocity. I’m displaying this in the plot’s subtitle along with the time elapsed since the projectile was launched. The displayed values are updated each frame using the value returned by the expression enclosed in glue braces for a frame. The variable frame_along is made available by gganimate::transition_along() (see below) and gives the position on the along-dimension (time in seconds in this case) that a frame corresponds to. Here I’m using frame_along to display the elapsed time, and to index the data frame df for the vertical velocity at a given second. The latter is a slight workaround because vy cannot be accessed directly in the glue braces.\n\np <- p +\n  labs(\n    title = str_c(\n      \"Projectile motion of an object launched with \",\n      #\" <br> \",\n      \"a speed of 11.4 m/s at an angle of 52.1°\"\n    ),\n    subtitle = str_c(\n      \"Time: \",\n      \"{formattable(frame_along, digits = 2, format = 'f')}s\",\n      \"\\n\",\n      \"Vertical velocity = \",\n      \"{formattable(df$vy[df$second == frame_along], digits = 2, format = 'f')}\",\n      \" m/s\"\n    ),\n    x = \"Distance (m)\",\n    y = \"Height (m)\",\n    caption = \"Graphic: Michael McCarthy\"\n  )\n\nNow for theming. I wanted something minimalistic with a scientific feel—the classic theme paired with truncated axes courtesy of ggh4x does this nicely. Finally, I originally planned to use element_markdown() from ggtext to enable markdown text in the subtitle of the plot so that vertical velocity could be written like \\(\\textrm{Velocity}_Y\\); however, this caused issues with the text spacing when rendering the animation to video, so I opted not to.1\n\np <- p +\n  guides(x = \"axis_truncated\", y = \"axis_truncated\") +\n  theme_classic(base_family = \"serif\")\n\nAnd finally, the animation code. Yes, that’s it. Animations can be tweaked and spiced up with other functions in gganimate, but I ran into issues making the ones I wanted to use work with transition_reveal().\n\nanim <- p +\n  transition_reveal(second)\n\nanim\n\n\n\n  Your browser does not support the video tag;  for browser support, please see:  https://www.w3schools.com/tags/tag_video.asp \n\n\n\n\nLaunching a projectile on different planets\nNow to test how the gravity of each planet in our solar system influences projectile motion. As a reminder, I already simulated the projectile motion data in planets_trajectory, so now it’s just a matter of plotting it.\nSince the simulation is space themed, the plot should be too. Instead of using a simple point to represent the projectile, I’m going to use Font Awesome’s rocket icon by way of the emojifont package. To make it extra, I’ll also add propulsion and rotation to the rocket’s animation.\n\n# Make it so the propulsion is only present for first half of animation, so it\n# looks like the rockets are launching.\nrocket_propulsion <- planets_trajectory %>%\n  group_by(planet) %>%\n  mutate(retain = rep(c(TRUE, FALSE), each = 50)) %>%\n  ungroup() %>%\n  mutate(x = case_when(\n    retain == FALSE ~ NA_real_,\n    TRUE ~ x\n  ))\n\nThe plotting code is mostly boilerplate, but I’ve added comments to highlight a few noteworthy points.\n\np <- ggplot(planets_trajectory, aes(x = x, y = y)) +\n  geom_line(\n    aes(colour = planet, group = planet),\n    linetype = \"dashed\",\n    alpha = 0.5,\n    # Change the key glyph in the legend to a point, to represent a planet\n    key_glyph = \"point\"\n  ) +\n  geom_point(\n    data = rocket_propulsion,\n    aes(group = planet),\n    colour = \"orange\"\n  ) +\n  # Change the angle at different frames to rotate the rocket\n  geom_text(\n    aes(colour = planet, group = planet, label = fontawesome(\"fa-rocket\")),\n    family='fontawesome-webfont',\n    angle = rep(seq(0, 45, length = 100), 10),\n    size = 6,\n    # There is no rocket key glyph, so override this too\n    key_glyph = \"point\"\n  ) +\n  scale_color_manual(\n    values = c(\n      \"#97979F\",\n      \"#BBB7AB\",\n      \"#8CB1DE\",\n      \"#DAD9D7\",\n      \"#E27B58\",\n      \"#C88B3A\",\n      \"#C5AB6E\",\n      \"#93B8BE\",\n      \"#6081FF\",\n      \"#4390BA\"\n    )\n  ) +\n  labs(\n    title = str_c(\n      \"projectile motion of an object launched on different planets in our solar system\"\n    ),\n    x = \"distance (m)\",\n    y = \"height (m)\",\n    caption = \"graphic: michael mccarthy\"\n  ) +\n  guides(\n    x = \"axis_truncated\",\n    y = \"axis_truncated\",\n    colour = guide_legend(title.vjust = .7, nrow = 1, label.position = \"bottom\")\n  ) +\n  theme_classic(base_family = \"mono\") +\n  theme(\n    text = element_text(colour = \"white\"),\n    axis.text = element_text(colour = \"white\"),\n    rect = element_rect(fill = \"black\"),\n    panel.background = element_rect(fill = \"black\"),\n    axis.ticks = element_line(colour = \"white\"),\n    axis.line = element_line(colour = \"white\"),\n    legend.position = \"top\",\n    legend.justification = \"left\"\n  )\n\nFinally, the animation code. The shadow_wake() function is applied to the orange points used for rocket propulsion to really sell the effect.\n\nanim <- p +\n  transition_reveal(second) +\n  shadow_wake(wake_length = 0.1, size = 2, exclude_layer = c(1, 3))\n\n\n\n  Your browser does not support the video tag;  for browser support, please see:  https://www.w3schools.com/tags/tag_video.asp"
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#section",
    "href": "posts/2022-06-16_projectile-motion/index.html#section",
    "title": "On motion",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#michael-mccarthy",
    "href": "posts/2022-06-16_projectile-motion/index.html#michael-mccarthy",
    "title": "On motion",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#comments",
    "href": "posts/2022-06-16_projectile-motion/index.html#comments",
    "title": "On motion",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "posts/2022-06-16_projectile-motion/index.html#session-info",
    "href": "posts/2022-06-16_projectile-motion/index.html#session-info",
    "title": "On motion",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-21\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.10  2022-09-01 [1] CRAN (R 4.2.0)\n emojifont   * 0.5.5   2021-04-20 [1] CRAN (R 4.2.0)\n forcats     * 0.5.2   2022-08-19 [1] CRAN (R 4.2.0)\n formattable * 0.2.1   2021-01-07 [1] CRAN (R 4.2.0)\n gganimate   * 1.0.8   2022-09-08 [1] CRAN (R 4.2.0)\n ggh4x       * 0.2.3   2022-11-09 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.0   2022-11-04 [1] CRAN (R 4.2.0)\n glue        * 1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.2.0)\n purrr       * 0.3.5   2022-10-06 [1] CRAN (R 4.2.0)\n readr       * 2.1.3   2022-10-01 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.0)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.1   2022-09-08 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.2   2022-07-18 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html",
    "href": "posts/2021-06-19_distill/index.html",
    "title": "What’s he building in there?",
    "section": "",
    "text": "Note: This blog is no longer built with Distill. It is now built with Quarto, which is in many ways a successor to Distill."
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#overview",
    "href": "posts/2021-06-19_distill/index.html#overview",
    "title": "What’s he building in there?",
    "section": "Overview",
    "text": "Overview\nTidy Tales is built using Distill for R Markdown, a web publishing format optimized for scientific and technical communication. I chose Distill for Tidy Tales over other R website formats for its simplicity and style. My personal website uses blogdown, a more customizable but also more complicated format, which I did not want or need for Tidy Tales. That said, I did encounter some restrictions that I wanted to overcome while customizing Tidy Tales using the tools provided by Distill. This post covers some tips and tricks to get around these restrictions."
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#page-and-article-metadata",
    "href": "posts/2021-06-19_distill/index.html#page-and-article-metadata",
    "title": "What’s he building in there?",
    "section": "Page and Article Metadata",
    "text": "Page and Article Metadata\nDistill comes equipped with a number of features to automatically enable richer sharing of article links on the web using article metadata. However, some of these features are not available for non-article pages on distill blogs (such as link preview images for the home page), and the automatic behaviour of these features limits how much they can be customized. Both of these limitations can be overcome using the metathis package by Garrick Aden-Buie.\nTom Mock has a great blog post diving into how metadata can be used to customize how links from a distill blog appear on social media. It’s a great resource and I followed it to add metadata and preview images to the home and about pages of Tidy Tales.\nHere is what the index.Rmd file for the Tidy Tales home page looks like.\n---\ntitle: \"Wrangling, Visualizing, Modelling, Communicating data\"\nsite: distill::distill_website\nlisting: posts\n---\n\n```{r, include=FALSE, results='asis'}\nlibrary(metathis)\n\nmeta() %>%\n  meta_social(\n    title = \"Tidy Tales\",\n    description = \"Wrangling, Visualizing, Modelling, Communicating data\",\n    url = \"https://tidytales.ca\",\n    image = \"https://tidytales.ca/inst/images/twittercard.png\",\n    image_alt = \"Tidy Tales logo\",\n    og_type = \"website\",\n    twitter_card_type = \"summary\",\n    twitter_site = NULL\n  )\n```\nWhen the site is built distill will automatically generate metadata for the home page, and the metathis code in index.Rmd will generate additional metadata for the home page. Here is what it looks like in HTML.\n<!-- Generated by distill -->\n<meta property=\"og:title\" content=\"Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:locale\" content=\"en_US\">\n<meta property=\"og:site_name\" content=\"Tidy Tales | Michael McCarthy\">\n<meta property=\"twitter:card\" content=\"summary\">\n<meta property=\"twitter:title\" content=\"Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"twitter:site\" content=\"@propertidytales\">\n<meta property=\"twitter:creator\" content=\"@mccarthymg\">\n\n<!-- Generated by metathis -->\n<meta property=\"og:locale\" content=\"en_US\">\n<meta name=\"twitter:title\" content=\"Tidy Tales\">\n<meta name=\"twitter:description\" content=\"Wrangling, Visualizing, Modelling, Communicating data\">\n<meta name=\"twitter:url\" content=\"https://tidytales.ca\">\n<meta name=\"twitter:image:src\" content=\"https://tidytales.ca/inst/images/twittercard.png\">\n<meta name=\"twitter:image:alt\" content=\"Tidy Tales logo\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta property=\"og:title\" content=\"Tidy Tales\">\n<meta property=\"og:description\" content=\"Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"og:url\" content=\"https://tidytales.ca\">\n<meta property=\"og:image\" content=\"https://tidytales.ca/inst/images/twittercard.png\">\n<meta property=\"og:image:alt\" content=\"Tidy Tales logo\">\n<meta property=\"og:type\" content=\"website\">\nThere is some overlap between the <meta> tags generated by distill and metathis, however, the metadata tags generated by metathis seem to take precedence over those automatically generated by distill. For example, the Twitter card for the Tidy Tales home page displays “Tidy Tales” as its title, rather than “Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data”.\n\nArticle Metadata\nThe ability to override some of the metadata generated by distill using metathis is hacky, but it also affords more customization for distill blogs. One trick I’m taking full advantage of with this is to have unique preview images between posts on Tidy Tales and their social cards. Distill allows you to specify a preview image for a post using the preview chunk option.\n```{r, preview=TRUE}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) +\n  geom_smooth()\n```\nThis preview image will be used alongside post listings and in social cards. However, if a different image is specified in metathis::meta_social() that image will be used in social cards but the preview image specified in the post chunk will still be used alongside post listings. I’m using this on Tidy Tales to have branded images for social cards and plain images for post listings. Here’s an example of the branded social card image from my first post.\n\n\n\n\n\nThe branded social card image for my first post. Copy the post link into a tweet to see it in action."
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#utterances-comments",
    "href": "posts/2021-06-19_distill/index.html#utterances-comments",
    "title": "What’s he building in there?",
    "section": "Utterances Comments",
    "text": "Utterances Comments\nDistill only supports Disqus comments officially. I did not want to use Disqus comments on Tidy Tales because it would add bloat to my posts, and because I do not want a third-party data mining and tracking Tidy Tales readers. Utterances is a lightweight alternative that uses GitHub issues for comments. Miles McBain shared an HTML script on his blog to add Utterances to a distill blog.\nHere is what the script for Tidy Tales looks like.\n<script>\n document.addEventListener(\"DOMContentLoaded\", function () {\n   if (!/posts/.test(location.pathname)) {\n     return;\n   }\n\n   var script = document.createElement(\"script\");\n   script.src = \"https://utteranc.es/client.js\";\n   script.setAttribute(\"repo\", \"mccarthy-m-g/tidytales\");\n   script.setAttribute(\"issue-term\", \"title\");\n   script.setAttribute(\"crossorigin\", \"anonymous\");\n   script.setAttribute(\"label\", \"utterances\");\n   script.setAttribute(\"theme\", \"github-light\");\n\n   /* wait for article to load, append script to article element */\n   var observer = new MutationObserver(function (mutations, observer) {\n     var article = document.querySelector(\"details.comment-section\");\n     if (article) {\n       observer.disconnect();\n       /* HACK: article scroll */\n       article.setAttribute(\"style\", \"overflow-y: hidden\");\n       article.appendChild(script);\n     }\n   });\n\n   observer.observe(document.body, { childList: true });\n });\n</script>\nThe script uses JavaScript to inject the Utterances <iframe> into the end of the first HTML Element within the document that matches the CSS selector specified in document.querySelector(). By default, the script shared by Miles will place the comment section at the end of a distill post’s body. Since Utterances comments sections are not collapsible this presents a problem though, as more comments are made readers will have to scroll further and further to reach a post’s appendix.\nTo overcome this on Tidy Tales I created new CSS selectors that use the <details> tag, so readers can show and hide the comments section as they please, and added a brightness and opacity filter to the selector for the Utterances <iframe> to make it fit into the Tidy Tales colour scheme better. I also wanted my comments section to be in the appendix of my posts rather than the body.\nd-appendix details.comment-section {\n  color: var(--dark-shade-alpha);\n  font-family: var(--heading-font);\n  font-size: 15px !important;\n}\n\nd-appendix details.comment-section summary:after {\n  content: \"Show\";\n}\n\nd-appendix details[open].comment-section summary:after {\n  content: \"Hide\";\n}\n\n.utterances {\n  filter: brightness(95%) opacity(85%);\n}\nThe above HTML and CSS is applied to all Tidy Tales posts using the theme and includes parameters in _site.yml, so to add Utterances to a post I only need to include the following in the R Markdown file for a post as an appendix header.\n## Comments {.appendix}\n\n<details open class=\"comment-section\">\n   <summary>\n   </summary>\n</details>"
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#post-templates",
    "href": "posts/2021-06-19_distill/index.html#post-templates",
    "title": "What’s he building in there?",
    "section": "Post Templates",
    "text": "Post Templates\nFinally, and most importantly, I am using an R Markdown template for new Tidy Tales posts so I don’t need to copy and paste all of my customizations into the YAML and body of every post I create. This is easily done using the create_post_from_template() function in the distilltools package by Ella Kaye. And it will be even easier after the Pull Request I’m working on with Ella adds an RStudio addin for creating new posts from a template to the package.\n\n\nElla also created the awesome Distill Club hex sticker I used for this post’s preview image.\n\n\n\n\n\nPreview of the new post from template RStudio addin for distilltools."
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#community-tips-and-tricks",
    "href": "posts/2021-06-19_distill/index.html#community-tips-and-tricks",
    "title": "What’s he building in there?",
    "section": "Community Tips and Tricks",
    "text": "Community Tips and Tricks\nDistill has a great community of users supporting each other to build and customize their sites. John Paul Helveston has put together the Distillery—a distill blog about building distill websites and blogs—to collect tips and tricks from the community and to showcase their distill websites and blogs. Check it out if you’re thinking of joining the Distill Club!"
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#section",
    "href": "posts/2021-06-19_distill/index.html#section",
    "title": "What’s he building in there?",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#michael-mccarthy",
    "href": "posts/2021-06-19_distill/index.html#michael-mccarthy",
    "title": "What’s he building in there?",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#comments",
    "href": "posts/2021-06-19_distill/index.html#comments",
    "title": "What’s he building in there?",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "posts/2021-06-19_distill/index.html#session-info",
    "href": "posts/2021-06-19_distill/index.html#session-info",
    "title": "What’s he building in there?",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-21\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html",
    "href": "posts/2022-09-29_borderlands/index.html",
    "title": "Tales from the Borderlands",
    "section": "",
    "text": "Borderlands is a an action role-playing first-person looter shooter video game franchise set in a space western science-fiction universe. The games have a dramatic comic book art style that I want to capture in my plot.\n\n\n\n\n\nIn-game screenshot from Borderlands 3.\n\n\n\n\nGearbox, the developers of Borderlands, have explained that this art style is achieved using “hand-drawn textures, scanned in and coloured in Photoshop, combined with software that draws graphic novel-style outlines around characters and objects, sharpens shadows to look more like something an artist might create, and even draws lines on hills and inclines. Finally the character models are all revamped with more exaggerated proportions, creating the appearance of a detailed comic book in motion.”\nSome of these are not relevant to plotting, but two are:\n\nDrawing graphic novel-style outlines\nUsing hand-drawn textures\n\n\n\nThe in-game menus in Borderlands 3 provide a great design reference for plot theming.\n\n\n\n\n\nThe ECHO-3 in-game menu in Borderlands 3.\n\n\n\n\n\n\n\n\n\n\n\nLoot in Borderlands (guns, grenades, shields, etc.) are colour categorized by the rarity with which they can be found in containers or dropped by defeated enemies. From left to right the categories are: Common, Uncommon, Rare, Epic, Legendary.\n\n\n\n\nI want to translate these design elements to my plot like so:\n\nThe Compacta Bold font can be used for plot text.\nThe blue background and light blue UI highlights can be used for the plot background and axes, respectively.\nThe white header text and the blue text can be used for different textual elements of the plot.\nThe yellow colour can be used for the plot title (this is the colour used for the game’s titles).\nThe loot rarity colours can be used for grouping data in plot geoms.\nAll elements should have a black outline.\n\nApplying these elements to my plot will help it fit the Borderlands aesthetic."
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#prerequisites",
    "href": "posts/2022-09-29_borderlands/index.html#prerequisites",
    "title": "Tales from the Borderlands",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(lubridate)\nlibrary(magick)\nlibrary(ggdist)\n\nI’ll be using Steam player data for my plot. The data contains statistics for the average and peak number of players playing a variety of games each month from July 2012 to February 2022. You can download this data with the Data Source code in the appendix, or from Tidy Tuesday with tidytuesdayR::tt_load(\"2021-03-16\").\n\n# Load the weekly data\ngames <- read_csv(here(\"data\", \"2021-03-16_games.csv\"))\ngames"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#wrangle",
    "href": "posts/2022-09-29_borderlands/index.html#wrangle",
    "title": "Tales from the Borderlands",
    "section": "Wrangle",
    "text": "Wrangle\nI only want data from the mainline Borderlands titles for my plot, so let’s get those.\n\n# Filter to mainline Borderlands titles available in the data. The first game\n# is not available in the dataset so filtering based on the title and digit\n# works fine here.\nborderlands <- games %>%\n  filter(str_detect(gamename, \"Borderlands[[:space:]][[:digit:]]\"))\n\nborderlands\n\n\n\n  \n\n\n\nNow to explore the data.\n\n# Summarize how much data exists for each Borderlands title\nborderlands %>%\n  group_by(gamename) %>%\n  summarise(count = n())\n\n\n\n  \n\n\n\nBorderlands 2 was released on Steam in September 2012 and Borderlands 3 was released in March 2020, which explains the discrepancy in how much data exists between the two. One way to make them more comparable is to filter the Borderlands 2 data down to only its first year of release.\n\n# Wrangle date data into a date-time object to prepare for filtering\nborderlands <- borderlands %>%\n  mutate(date = glue(\"{year}-{month}\"),\n         date = parse_date_time(date, \"ym\"),\n         .after = gamename)\n\n# Filter Borderlands 2 data down to only its first year of release to make\n# comparisons with Borderlands 3 more appropriate. There is no need to filter\n# by date for Borderlands 3 since only its first year of data are available in\n# the dataset.\nborderlands <- borderlands %>%\n  filter(gamename == \"Borderlands 2\" &\n         date %within% interval(ymd(\"2012--09-01\"), ymd(\"2013--08-01\")) |\n         gamename == \"Borderlands 3\") \n\nborderlands\n\n\n\n  \n\n\n\nNow there is monthly data for the first year of release for each game. I want to compare how the two games performed against each other in their first year. This will give some insight on how the player stats changed over time within and between the games. Creating a new variable counting the number of months since release is a clean way to do this. I could also stick with nominal months, but using a count variable will make the comparison between the games more apparent in my plot.\n\n# This code is sufficient since the data is in reverse chronological order.\nborderlands <- borderlands %>%\n  group_by(gamename) %>%\n  mutate(since_release = 11:0, .after = month)\n\nborderlands\n\n\n\n  \n\n\n\nFinally, I need to decide how to relate the five rarity colours from Figure @ref(fig:loot-rarity) to the player stats for the first year of release for each game. Since there are five levels, cutoffs based on quantiles could work.\n\nborderlands %>%\n  summarise(quantile = quantile(peak))\n\n\n\n  \n\n\n\nRather than following the quantiles exactly, I’ve picked some cutoffs that look like they would work well for both games. An alternative approach would be to assign cutoffs per game, in which case the exact quantiles could be used.\n\nborderlands <- borderlands %>%\n  mutate(rarity = case_when(\n    between(peak, 0, 19999) ~ \"white\",\n    between(peak, 20000, 39999) ~ \"green\",\n    between(peak, 40000, 59999) ~ \"blue\",\n    between(peak, 60000, 79999) ~ \"purple\",\n    between(peak, 80000, 150000) ~ \"orange\"\n  ))"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#visualize",
    "href": "posts/2022-09-29_borderlands/index.html#visualize",
    "title": "Tales from the Borderlands",
    "section": "Visualize",
    "text": "Visualize\nThere are two obvious ways to visualize this data: A time series line graph, or a bar graph. I’m going to use a bar graph, mainly so I can group the bars using the loot rarity colours I mentioned earlier. A line graph would be a better choice for communication though.\nThe ggplot2 package doesn’t support outlines for the plot elements such as titles, axis lines, or strips—only some plot geoms support outlines. Because of this, I need to create two plots: An outline plot, and a coloured plot. Then I can combine the two plots with the magick package to create the outline effect.\nThe outline plot will look like this. Nothing too exciting.\n\noutline_plot <- ggplot(borderlands, aes(since_release, peak)) +\n  facet_wrap(vars(gamename)) +\n  labs(\n    x = \"Months Since Release\",\n    y = \"Peak Player Count\",\n    title = \"Peak players in Borderlands drop faster\\nthan common loot\",\n    caption = \"Source: Steam / Graphic: Michael McCarthy\"\n  ) +\n  theme_bw() +\n  theme(\n    text = element_text(family = \"Compacta Bold\", colour = \"black\"),\n    axis.text = element_text(colour = \"black\"),\n    axis.line = element_blank(),\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill = NA),\n    strip.background = element_rect(fill = \"white\", colour = \"black\")\n  )\n\noutline_plot\n\n\n\n\nThe coloured plot is the same thing… but with colour. I’m adding a pink background here so the white text is visible, and so there is a distinct colour I can detect to make the background transparent later.\n\nblue <- \"#08283c\"\nlight_blue <- \"#115190\"\nbaby_blue <- \"#a7e5ff\"\nindigo <- \"#cef8ff\"\n\ncolour_plot <- outline_plot +\n  theme(\n    text = element_text(colour = \"white\"),\n    # Axis\n    axis.text = element_text(colour = indigo),\n    axis.ticks = element_line(colour = light_blue),\n    # Panel\n    panel.grid.major.y = element_line(colour = light_blue),\n    panel.grid.minor.y = element_line(colour = light_blue),\n    panel.border = element_rect(colour = light_blue, fill = NA),\n    panel.background = element_rect(fill = blue, colour = light_blue),\n    # Plot\n    plot.title = element_text(colour = \"#fff01a\"),\n    plot.background = element_rect(fill = \"pink\"),\n    # Strip\n    strip.text = element_text(colour = baby_blue),\n    strip.background = element_rect(fill = \"#00378f\", colour = light_blue)\n  )\n\ncolour_plot\n\n\n\n\nNow for some image magic! First I need to turn the outline ggplot into an image to prepare for post-processing. I’ll save the image to a temporary file since it’s only an intermediate step. Note here that the image is really big, and I’ve scaled up the sizes of plot elements accordingly; this is needed to make the outlines look good, since the post-processing involves detecting the edges of elements.\n\n# Create plot used for the outline\nfile <- tempfile(fileext = '.png')\nragg::agg_png(file, width = 1920, height = 1200, res = 300, units = \"px\", scaling = 0.5)\noutline_plot +\n  geom_col(fill = \"white\") +\n  stat_ccdfinterval(fill = \"white\", point_alpha = 0) +\n  theme(\n    # Axis\n    axis.title = element_text(size = 36),\n    axis.text = element_text(size = 28),\n    axis.text.x = element_text(margin = margin(5, 0, 5, 0, \"pt\")),\n    axis.text.y = element_text(margin = margin(0, 5, 0, 5, \"pt\")),\n    axis.line = element_line(size = 0),\n    axis.ticks = element_line(size = 2),\n    axis.ticks.length = unit(10, \"pt\"),\n    # Panel\n    panel.border = element_rect(size = 0),\n    panel.background = element_rect(colour = \"black\", size = 5),\n    panel.spacing = unit(3, \"lines\"),\n    # Plot\n    plot.title = element_text(size = 56),\n    plot.margin = unit(c(40, 40, 40, 40), \"pt\"),\n    # Strip\n    strip.text = element_text(size = 36, margin = margin(0.5,0,0.5,0, \"cm\")),\n    strip.background = element_rect(size = 5),\n    # Caption\n    plot.caption = element_text(size = 24)\n  )\ninvisible(dev.off())\n\nFor the actual post-processing, I detect the edges of all the plot elements, then dilate them outwards. Finally the white areas in the plot are made transparent, so all that’s left is the black outlines. To demonstrate, I’ve created a blank white image here and flattened the outline plot on top of it.\n\nplot_outline_layer <- image_read(file) %>%\n  image_convert(type=\"Grayscale\") %>%\n  image_negate() %>%\n  image_threshold(\"white\", \"5%\") %>%\n  image_morphology('EdgeOut', \"Diamond\", iterations = 6) %>%\n  image_morphology('Dilate', \"Diamond\", iterations = 1) %>%\n  image_negate() %>%\n  image_transparent(\"white\", fuzz = 7)\n\nimage_flatten(c(image_blank(1920, 1200, color = \"white\"), plot_outline_layer))\n\n\n\n\nNext the colour plot, which just needs to be scaled up with the bars added to it, then saved to a temporary file. Here I’ve used CCDF bars with a gradient, courtesy of the ggdist package, going from black to colour to match the gradients in the ECHO-3 in-game menu in Borderlands 3. It’s a bit tacky, and there isn’t an easy way to add gradients to any other plot elements, but it fits the theme.\n\nfile <- tempfile(fileext = '.png')\nragg::agg_png(file, width = 1920, height = 1200, res = 300, units = \"px\", scaling = 0.5)\ncolour_plot +\n  # First a solid fill column\n  geom_col(aes(fill = rarity)) +\n  # Then use a ccdfinterval to create a vertical gradient over top the solid\n  # fill\n  stat_ccdfinterval(\n    aes(fill = rarity, fill_ramp = stat(y)),\n    fill_type = \"gradient\",\n    show.legend = FALSE,\n    point_alpha = 0\n  ) +\n  scale_fill_identity() +\n  scale_fill_ramp_continuous(\n    from = \"black\",\n    range = c(0.8, 1),\n    limits = c(0, 15000)\n  ) +\n  expand_limits(y = 0) +\n  # Finally add a black outline over top of everything\n  geom_col(fill = NA, colour = \"black\", size = 1) +\n  theme(\n    # Axis\n    axis.title = element_text(size = 36),\n    axis.text = element_text(size = 28),\n    axis.text.x = element_text(margin = margin(5, 0, 5, 0, \"pt\")),\n    axis.text.y = element_text(margin = margin(0, 5, 0, 5, \"pt\")),\n    axis.line = element_line(size = 0),\n    axis.ticks = element_line(size = 2),\n    axis.ticks.length = unit(10, \"pt\"),\n    # Panel\n    panel.border = element_rect(size = 0),\n    panel.background = element_rect(size = 5),\n    panel.spacing = unit(3, \"lines\"),\n    # Plot\n    plot.title = element_text(size = 56),\n    plot.margin = unit(c(40, 40, 40, 40), \"pt\"),\n    plot.background = element_rect(fill = \"pink\"),\n    # Strip\n    strip.text = element_text(size = 36, margin = margin(0.5,0,0.5,0, \"cm\")),\n    strip.background = element_rect(size = 5),\n    # Caption\n    plot.caption = element_text(size = 24)\n  )\ninvisible(dev.off())\n\nplot_fill_layer <- image_read(file)\n\nplot_fill_layer\n\n\n\n\nFinally, the outline and fill layers can be combined, and the background made transparent. I think the outline effect is actually pretty convincing.\n\nplot_layer <- image_composite(plot_fill_layer, plot_outline_layer) %>% \n  image_transparent(\"pink\", fuzz = 7)\n\nplot_layer\n\n\n\n\nAnd the background image can be added for the final composite. To make it stand out less, I’ve overlaid a solid black frame with 50% opacity.\n\nbackground_layer <- image_read(\n  here(\"posts\", \"2022-09-29_borderlands\", \"images\", \"plot-background.png\")\n) %>% \n  image_colorize(50, \"black\")\n\nfinal_graphic <- image_composite(background_layer, plot_layer)\n\nThis plot isn’t going to win any awards (unless it’s for an ugly plots contest), but it does show that you can do some pretty cool programmatic image processing of your plots (or any other images) with the magick package."
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#final-graphic",
    "href": "posts/2022-09-29_borderlands/index.html#final-graphic",
    "title": "Tales from the Borderlands",
    "section": "Final Graphic",
    "text": "Final Graphic"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#section",
    "href": "posts/2022-09-29_borderlands/index.html#section",
    "title": "Tales from the Borderlands",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#michael-mccarthy",
    "href": "posts/2022-09-29_borderlands/index.html#michael-mccarthy",
    "title": "Tales from the Borderlands",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#comments",
    "href": "posts/2022-09-29_borderlands/index.html#comments",
    "title": "Tales from the Borderlands",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#session-info",
    "href": "posts/2022-09-29_borderlands/index.html#session-info",
    "title": "Tales from the Borderlands",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-21\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.10  2022-09-01 [1] CRAN (R 4.2.0)\n forcats     * 0.5.2   2022-08-19 [1] CRAN (R 4.2.0)\n ggdist      * 3.2.0   2022-07-19 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.0   2022-11-04 [1] CRAN (R 4.2.0)\n glue        * 1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.2.0)\n lubridate   * 1.9.0   2022-11-06 [1] CRAN (R 4.2.0)\n magick      * 2.7.3   2021-08-18 [1] CRAN (R 4.2.0)\n purrr       * 0.3.5   2022-10-06 [1] CRAN (R 4.2.0)\n readr       * 2.1.3   2022-10-01 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.0)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.1   2022-09-08 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.2   2022-07-18 [1] CRAN (R 4.2.0)\n timechange  * 0.1.1   2022-11-04 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#data",
    "href": "posts/2022-09-29_borderlands/index.html#data",
    "title": "Tales from the Borderlands",
    "section": "Data",
    "text": "Data\n\nDownload the data used in this post."
  },
  {
    "objectID": "posts/2022-09-29_borderlands/index.html#fair-dealing",
    "href": "posts/2022-09-29_borderlands/index.html#fair-dealing",
    "title": "Tales from the Borderlands",
    "section": "Fair Dealing",
    "text": "Fair Dealing\n\nAny of the trademarks, service marks, collective marks, design rights or similar rights that are mentioned, used, or cited in this article are the property of their respective owners. They are used here as fair dealing for the purpose of education in accordance with section 29 of the Copyright Act and do not infringe copyright."
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html",
    "title": "Shared axis labels in patchwork plots",
    "section": "",
    "text": "To access the datasets, help pages, and functions that we will use in this code snippet, load the following packages:\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\nThen make some data and ggplot2 plots to be used in the patchwork.\n\nhuron <- data.frame(year = 1875:1972, level = as.vector(LakeHuron))\nh <- ggplot(huron, aes(year))\n\nh1 <- h +\n  geom_ribbon(aes(ymin = level - 1, ymax = level + 1), fill = \"grey70\") +\n  geom_line(aes(y = level))\n\nh2 <- h + geom_area(aes(y = level))"
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#shared-x-axis-labels",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#shared-x-axis-labels",
    "title": "Shared axis labels in patchwork plots",
    "section": "Shared x-axis labels",
    "text": "Shared x-axis labels\nWe set the bottom margin to 0 so the tag is in the same vertical position that the x-axis would otherwise be in.\n\n# Create the patchwork, dropping the x-axis labels from the plots, and setting\n# the margins\nh_patch <- h1 + h2 & xlab(NULL) & theme(plot.margin = margin(5.5, 5.5, 0, 5.5))\n\n# Use the tag label as an x-axis label\nwrap_elements(panel = h_patch) +\n  labs(tag = \"year\") +\n  theme(\n    plot.tag = element_text(size = rel(1)),\n    plot.tag.position = \"bottom\"\n  )"
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#shared-y-axis-labels",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#shared-y-axis-labels",
    "title": "Shared axis labels in patchwork plots",
    "section": "Shared y-axis labels",
    "text": "Shared y-axis labels\nWe set the left margin to 0 so the tag is in the same horizontal position that the y-axis would otherwise be in.\n\n# Create the patchwork, dropping the y-axis labels from the plots, and setting\n# the margins\nh_patch <- h1 / h2 & ylab(NULL) & theme(plot.margin = margin(5.5, 5.5, 5.5, 0))\n\n# Use the tag label as a y-axis label\nwrap_elements(h_patch) +\n  labs(tag = \"level\") +\n  theme(\n    plot.tag = element_text(size = rel(1), angle = 90),\n    plot.tag.position = \"left\"\n  )"
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#section",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#section",
    "title": "Shared axis labels in patchwork plots",
    "section": "",
    "text": "Michael McCarthy\n\nThanks for reading! I’m Michael, the voice behind Tidy Tales. I am an award winning data scientist and R programmer with the skills and experience to help you solve the problems you care about. You can learn more about me, my consulting services, and my other projects on my personal website."
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#michael-mccarthy",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#michael-mccarthy",
    "title": "Shared axis labels in patchwork plots",
    "section": "Michael McCarthy",
    "text": "Michael McCarthy"
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#comments",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#comments",
    "title": "Shared axis labels in patchwork plots",
    "section": "Comments",
    "text": "Comments"
  },
  {
    "objectID": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#session-info",
    "href": "snippets/2022-12-22_patchwork-shared-axis-labels/index.html#session-info",
    "title": "Shared axis labels in patchwork plots",
    "section": "Session Info",
    "text": "Session Info\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Mojave 10.14.6\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Vancouver\n date     2022-12-22\n pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)\n quarto   1.2.280 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n ggplot2     * 3.4.0   2022-11-04 [1] CRAN (R 4.2.0)\n patchwork   * 1.1.2   2022-08-19 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Users/Michael/Library/R/x86_64/4.2/library/__tidytales\n [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  }
]