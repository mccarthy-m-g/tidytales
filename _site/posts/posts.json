[
  {
    "path": "posts/2021-06-19_distill/",
    "title": "What's he building in there?",
    "description": "Customizing a {distill} website.",
    "author": [
      {
        "name": "Michael McCarthy",
        "url": "../../about.html"
      }
    ],
    "date": "2021-06-19",
    "categories": [
      ".Misc",
      "{distill}",
      "{distilltools}",
      "{metathis}"
    ],
    "contents": "\n\nContents\nOverview\nPage and Article Metadata\nArticle Metadata\n\nUtterances Comments\nPost Templates\nCommunity Tips and Tricks\nComments\n\nOverview\nTidy Tales is built using Distill for R Markdown, a web publishing format optimized for scientific and technical communication. I chose Distill for Tidy Tales over other R website formats for its simplicity and style. My personal website uses blogdown, a more customizable but also more complicated format, which I did not want or need for Tidy Tales. That said, I did encounter some restrictions that I wanted to overcome while customizing Tidy Tales using the tools provided by Distill. This post covers some tips and tricks to get around these restrictions.\nPage and Article Metadata\nDistill comes equipped with a number of features to automatically enable richer sharing of article links on the web using article metadata. However, some of these features are not available for non-article pages on distill blogs (such as link preview images for the home page), and the automatic behaviour of these features limits how much they can be customized. Both of these limitations can be overcome using the metathis package by Garrick Aden-Buie.\nTom Mock has a great blog post diving into how metadata can be used to customize how links from a distill blog appear on social media. It’s a great resource and I followed it to add metadata and preview images to the home and about pages of Tidy Tales.\nHere is what the index.Rmd file for the Tidy Tales home page looks like.\n---\ntitle: \"Wrangling, Visualizing, Modelling, Communicating data\"\nsite: distill::distill_website\nlisting: posts\n---\n\n```{r, include=FALSE, results='asis'}\nlibrary(metathis)\n\nmeta() %>%\n  meta_social(\n    title = \"Tidy Tales\",\n    description = \"Wrangling, Visualizing, Modelling, Communicating data\",\n    url = \"https://tidytales.ca\",\n    image = \"https://tidytales.ca/inst/images/twittercard.png\",\n    image_alt = \"Tidy Tales logo\",\n    og_type = \"website\",\n    twitter_card_type = \"summary\",\n    twitter_site = NULL\n  )\n```\nWhen the site is built distill will automatically generate metadata for the home page, and the metathis code in index.Rmd will generate additional metadata for the home page. Here is what it looks like in HTML.\n<!-- Generated by distill -->\n<meta property=\"og:title\" content=\"Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:locale\" content=\"en_US\">\n<meta property=\"og:site_name\" content=\"Tidy Tales | Michael McCarthy\">\n<meta property=\"twitter:card\" content=\"summary\">\n<meta property=\"twitter:title\" content=\"Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"twitter:site\" content=\"@propertidytales\">\n<meta property=\"twitter:creator\" content=\"@mccarthymg\">\n\n<!-- Generated by metathis -->\n<meta property=\"og:locale\" content=\"en_US\">\n<meta name=\"twitter:title\" content=\"Tidy Tales\">\n<meta name=\"twitter:description\" content=\"Wrangling, Visualizing, Modelling, Communicating data\">\n<meta name=\"twitter:url\" content=\"https://tidytales.ca\">\n<meta name=\"twitter:image:src\" content=\"https://tidytales.ca/inst/images/twittercard.png\">\n<meta name=\"twitter:image:alt\" content=\"Tidy Tales logo\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta property=\"og:title\" content=\"Tidy Tales\">\n<meta property=\"og:description\" content=\"Wrangling, Visualizing, Modelling, Communicating data\">\n<meta property=\"og:url\" content=\"https://tidytales.ca\">\n<meta property=\"og:image\" content=\"https://tidytales.ca/inst/images/twittercard.png\">\n<meta property=\"og:image:alt\" content=\"Tidy Tales logo\">\n<meta property=\"og:type\" content=\"website\">\nThere is some overlap between the <meta> tags generated by distill and metathis, however, the metadata tags generated by metathis seem to take precedence over those automatically generated by distill. For example, the Twitter card for the Tidy Tales home page displays “Tidy Tales” as its title, rather than “Tidy Tales | Michael McCarthy: Wrangling, Visualizing, Modelling, Communicating data”.\nArticle Metadata\nThe ability to override some of the metadata generated by distill using metathis is hacky, but it also affords more customization for distill blogs. One trick I’m taking full advantage of with this is to have unique preview images between posts on Tidy Tales and their social cards. Distill allows you to specify a preview image for a post using the preview chunk option.\n```{r, preview=TRUE}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) +\n  geom_smooth()\n```\nThis preview image will be used alongside post listings and in social cards. However, if a different image is specified in metathis::meta_social() that image will be used in social cards but the preview image specified in the post chunk will still be used alongside post listings. I’m using this on Tidy Tales to have branded images for social cards and plain images for post listings. Here’s an example of the branded social card image from my first post.\n\n\n\n\n\nFigure 1: The branded social card image for my first post. Copy the post link into a tweet to see it in action.\n\n\n\nUtterances Comments\nDistill only supports Disqus comments officially. I did not want to use Disqus comments on Tidy Tales because it would add bloat to my posts, and because I do not want a third-party data mining and tracking Tidy Tales readers. Utterances is a lightweight alternative that uses GitHub issues for comments. Miles McBain shared an HTML script on his blog to add Utterances to a distill blog.\nHere is what the script for Tidy Tales looks like.\n<script>\n document.addEventListener(\"DOMContentLoaded\", function () {\n   if (!/posts/.test(location.pathname)) {\n     return;\n   }\n\n   var script = document.createElement(\"script\");\n   script.src = \"https://utteranc.es/client.js\";\n   script.setAttribute(\"repo\", \"mccarthy-m-g/tidytales\");\n   script.setAttribute(\"issue-term\", \"title\");\n   script.setAttribute(\"crossorigin\", \"anonymous\");\n   script.setAttribute(\"label\", \"utterances\");\n   script.setAttribute(\"theme\", \"github-light\");\n\n   /* wait for article to load, append script to article element */\n   var observer = new MutationObserver(function (mutations, observer) {\n     var article = document.querySelector(\"details.comment-section\");\n     if (article) {\n       observer.disconnect();\n       /* HACK: article scroll */\n       article.setAttribute(\"style\", \"overflow-y: hidden\");\n       article.appendChild(script);\n     }\n   });\n\n   observer.observe(document.body, { childList: true });\n });\n<\/script>\nThe script uses JavaScript to inject the Utterances <iframe> into the end of the first HTML Element within the document that matches the CSS selector specified in document.querySelector(). By default, the script shared by Miles will place the comment section at the end of a distill post’s body. Since Utterances comments sections are not collapsible this presents a problem though, as more comments are made readers will have to scroll further and further to reach a post’s appendix.\nTo overcome this on Tidy Tales I created new CSS selectors that use the <details> tag, so readers can show and hide the comments section as they please, and added a brightness and opacity filter to the selector for the Utterances <iframe> to make it fit into the Tidy Tales colour scheme better. I also wanted my comments section to be in the appendix of my posts rather than the body.\nd-appendix details.comment-section {\n  color: var(--dark-shade-alpha);\n  font-family: var(--heading-font);\n  font-size: 15px !important;\n}\n\nd-appendix details.comment-section summary:after {\n  content: \"Show\";\n}\n\nd-appendix details[open].comment-section summary:after {\n  content: \"Hide\";\n}\n\n.utterances {\n  filter: brightness(95%) opacity(85%);\n}\nThe above HTML and CSS is applied to all Tidy Tales posts using the theme and includes parameters in _site.yml, so to add Utterances to a post I only need to include the following in the R Markdown file for a post as an appendix header.\n## Comments {.appendix}\n\n<details open class=\"comment-section\">\n   <summary>\n   <\/summary>\n<\/details>\nPost Templates\nFinally, and most importantly, I am using an R Markdown template for new Tidy Tales posts so I don’t need to copy and paste all of my customizations into the YAML and body of every post I create. This is easily done using the create_post_from_template() function in the distilltools package by Ella Kaye. And it will be even easier after the Pull Request I’m working on with Ella adds an RStudio addin for creating new posts from a template to the package.\n\nElla also created the awesome Distill Club hex sticker I used for this post’s preview image.\n\n\n\nFigure 2: Preview of the new post from template RStudio addin for distilltools.\n\n\n\nCommunity Tips and Tricks\nDistill has a great community of users supporting each other to build and customize their sites. John Paul Helveston has put together the Distillery—a distill blog about building distill websites and blogs—to collect tips and tricks from the community and to showcase their distill websites and blogs. Check it out if you’re thinking of joining the Distill Club!\nComments\n\n\n\n",
    "preview": "posts/2021-06-19_distill/images/distillclub.png",
    "last_modified": "2021-06-19T16:38:33-06:00",
    "input_file": {},
    "preview_width": 2052,
    "preview_height": 2373
  },
  {
    "path": "posts/2021-06-15_demons-souls/",
    "title": "Go forth, slayer of Demons",
    "description": "Blending {ggplot2} geoms with {ggfx} and other {magick} tricks.",
    "author": [
      {
        "name": "Michael McCarthy",
        "url": "../../about.html"
      }
    ],
    "date": "2021-06-15",
    "categories": [
      ".Visualize",
      "{ggplot2}",
      "{ggfx}",
      "{magick}"
    ],
    "contents": "\n\nContents\nOverview\nTheming Inspiration\nR\nWrangle\nVisualize\n\nFinal Graphic\nComments\nData Source\nSession Info\nFair Dealing\n\nOverview\n\nOn the first day\nMan was granted a soul\nAnd with it, clarity\nOn the second day\nupon Earth was planted\nan irrevocable poison\nA soul-devouring demon\n\nDemon’s Souls is an action role-playing video game set in the dark fantasy kingdom of Boletaria, a land cursed with a deep, terrible fog brought forth by an ancient soul-devouring demon called the Old One. To lift the curse and mend the world players must slay and absorb the souls of five powerful archdemons, whereafter they can face the Old One and lull it back to slumber. Demon’s Souls is renowned for its challenge and design, and has made a lasting impact on the video game industry. It is also the progenitor of what has become one of my favourite video game franchises.\nTheming Inspiration\nHero text appears on the screen whenever the player performs a significant action in Demon’s Souls, such as slaying a demon or, infamously, dying themselves. These provide a great design reference for plot theming.\n\n\n\n\n\nFigure 1: In-game screenshots of the hero text from Demon’s Souls.\n\n\n\nDemon’s Souls also has a unique logo whose design I want to reference.\n\n\n\n\n\nFigure 2: The Demon’s Souls logo.\n\n\n\nI want to translate these design elements to my plot like so:\nThe Optimus Princeps font can be used for plot text.\nThe yellow and red colours for the hero text can be used to contrast successes and failures, respectively.\nThe distressed, broken style of the Demon’s Souls logo can be used for the plot’s title.\nApplying these elements to my plot will help it fit the Demon’s Souls aesthetic.\nR\n\n\nlibrary(tidyverse)\nlibrary(ggfx)\nlibrary(magick)\n\n\n\nI’ll be using PlayStation Network trophy data for my plot. The data contains statistics for the percent of players who have slain a given boss in Demon’s Souls out of all the players who have ever played the game. I have constructed the data manually since Sony does not provide an API to access PlayStation Network trophy data programmatically. Demon’s Souls was released on February 5, 2009, so it is unlikely these stats will change much in the future.\n\n\n# Tribbles are not just useful for scaring Klingons, they make it easy to\n# create tibbles too\ndemons_souls <- tribble(\n  ~boss,            ~boss_type,  ~location,              ~archstone, ~percent_completed,\n  \"Phalanx\",        \"Demon\",     \"Boletarian Palace\",    \"1-1\",      63.1,               \n  \"Tower Knight\",   \"Demon\",     \"Boletarian Palace\",    \"1-2\",      46.6,               \n  \"Penetrator\",     \"Demon\",     \"Boletarian Palace\",    \"1-3\",      30.3,               \n  \"False King\",     \"Archdemon\", \"Boletarian Palace\",    \"1-4\",      24.2,               \n  \"Armor Spider\",   \"Demon\",     \"Stonefang Tunnel\",     \"2-1\",      43.9,               \n  \"Flamelurker\",    \"Demon\",     \"Stonefang Tunnel\",     \"2-2\",      35.1,               \n  \"Dragon God\",     \"Archdemon\", \"Stonefang Tunnel\",     \"2-3\",      33.1,               \n  \"Fool’s Idol\",    \"Demon\",     \"Tower of Latria\",      \"3-1\",      35.7,               \n  \"Maneater\",       \"Demon\",     \"Tower of Latria\",      \"3-2\",      28.7,               \n  \"Old Monk\",       \"Archdemon\", \"Tower of Latria\",      \"3-3\",      27.7,               \n  \"Adjudicator\",    \"Demon\",     \"Shrine of Storms\",     \"4-1\",      36.1,               \n  \"Old Hero\",       \"Demon\",     \"Shrine of Storms\",     \"4-2\",      28.8,               \n  \"Storm King\",     \"Archdemon\", \"Shrine of Storms\",     \"4-3\",      28.1,               \n  \"Leechmonger\",    \"Demon\",     \"Valley of Defilement\", \"5-1\",      32.5,               \n  \"Dirty Colossus\", \"Demon\",     \"Valley of Defilement\", \"5-2\",      27.2,               \n  \"Maiden Astraea\", \"Archdemon\", \"Valley of Defilement\", \"5-3\",      26.6\n) %>%\n  mutate(across(boss_type:archstone, as_factor))\n\ndemons_souls\n\n\n#> # A tibble: 16 x 5\n#>    boss         boss_type location          archstone percent_complet…\n#>    <chr>        <fct>     <fct>             <fct>                <dbl>\n#>  1 Phalanx      Demon     Boletarian Palace 1-1                   63.1\n#>  2 Tower Knight Demon     Boletarian Palace 1-2                   46.6\n#>  3 Penetrator   Demon     Boletarian Palace 1-3                   30.3\n#>  4 False King   Archdemon Boletarian Palace 1-4                   24.2\n#>  5 Armor Spider Demon     Stonefang Tunnel  2-1                   43.9\n#>  6 Flamelurker  Demon     Stonefang Tunnel  2-2                   35.1\n#>  7 Dragon God   Archdemon Stonefang Tunnel  2-3                   33.1\n#>  8 Fool’s Idol  Demon     Tower of Latria   3-1                   35.7\n#>  9 Maneater     Demon     Tower of Latria   3-2                   28.7\n#> 10 Old Monk     Archdemon Tower of Latria   3-3                   27.7\n#> 11 Adjudicator  Demon     Shrine of Storms  4-1                   36.1\n#> 12 Old Hero     Demon     Shrine of Storms  4-2                   28.8\n#> 13 Storm King   Archdemon Shrine of Storms  4-3                   28.1\n#> 14 Leechmonger  Demon     Valley of Defile… 5-1                   32.5\n#> 15 Dirty Colos… Demon     Valley of Defile… 5-2                   27.2\n#> 16 Maiden Astr… Archdemon Valley of Defile… 5-3                   26.6\n\nWrangle\nThe data is already structured the way I want it for my plot, but there are still some interesting things to explore through wrangling and summary stats.\nWithin each location, players have to slay each demon in the order specified by the archstones. For example, in the Boletarian Palace a player cannot face the Tower Knight before they have slain the Phalanx. So each location has a first, second, and third boss (and the Boletarian Palace has a fourth that can only be faced after slaying all the other demons). This can be used to get an imperfect idea of player attrition in the game.\n\n\n# Detect the order of bosses based on archstone suffix\ndemons_souls <- demons_souls %>%\n  mutate(\n    archstone_boss = case_when(\n      str_detect(archstone, \"-1\") ~ \"First\",\n      str_detect(archstone, \"-2\") ~ \"Second\",\n      str_detect(archstone, \"-3\") ~ \"Third\",\n      str_detect(archstone, \"-4\") ~ \"Fourth (False King)\"\n    ),\n    archstone_boss = as_factor(archstone_boss),\n    .after = archstone\n  )\n\ndemons_souls\n\n\n#> # A tibble: 16 x 6\n#>    boss   boss_type location archstone archstone_boss percent_complet…\n#>    <chr>  <fct>     <fct>    <fct>     <fct>                     <dbl>\n#>  1 Phala… Demon     Boletar… 1-1       First                      63.1\n#>  2 Tower… Demon     Boletar… 1-2       Second                     46.6\n#>  3 Penet… Demon     Boletar… 1-3       Third                      30.3\n#>  4 False… Archdemon Boletar… 1-4       Fourth (False…             24.2\n#>  5 Armor… Demon     Stonefa… 2-1       First                      43.9\n#>  6 Flame… Demon     Stonefa… 2-2       Second                     35.1\n#>  7 Drago… Archdemon Stonefa… 2-3       Third                      33.1\n#>  8 Fool’… Demon     Tower o… 3-1       First                      35.7\n#>  9 Manea… Demon     Tower o… 3-2       Second                     28.7\n#> 10 Old M… Archdemon Tower o… 3-3       Third                      27.7\n#> 11 Adjud… Demon     Shrine … 4-1       First                      36.1\n#> 12 Old H… Demon     Shrine … 4-2       Second                     28.8\n#> 13 Storm… Archdemon Shrine … 4-3       Third                      28.1\n#> 14 Leech… Demon     Valley … 5-1       First                      32.5\n#> 15 Dirty… Demon     Valley … 5-2       Second                     27.2\n#> 16 Maide… Archdemon Valley … 5-3       Third                      26.6\n\nNow, there are two ways to go about getting this imperfect idea of player attrition in the game. The first involves using the entire data set.\n\n\n# Calculate the average percent of players who have slain the first, second,\n# ..., archstone boss across locations. \ndemons_souls %>%\n  group_by(archstone_boss) %>%\n  summarise(average_completed = mean(percent_completed))\n\n\n#> # A tibble: 4 x 2\n#>   archstone_boss      average_completed\n#> * <fct>                           <dbl>\n#> 1 First                            42.3\n#> 2 Second                           33.3\n#> 3 Third                            29.2\n#> 4 Fourth (False King)              24.2\n\nThe second involves removing the Phalanx from the data set due to its influential pull on the average for the first archstone boss. It has a much higher completion percent (63.1%) than the other bosses in the game, and the reason for this is that the Phalanx is the first boss in the game. Players must slay it before they can go to face the first archstone boss from other locations in the game. Removing the Phalanx might give a more accurate picture of average completion for first archstone bosses.\n\n\n# Trophy earned: Slayer of Demon \"Phalanx\"\ndemons_souls %>%\n  filter(boss != \"Phalanx\") %>%\n  group_by(archstone_boss) %>%\n  summarise(average_completed = mean(percent_completed))\n\n\n#> # A tibble: 4 x 2\n#>   archstone_boss      average_completed\n#> * <fct>                           <dbl>\n#> 1 First                            37.0\n#> 2 Second                           33.3\n#> 3 Third                            29.2\n#> 4 Fourth (False King)              24.2\n\nWith the Phalanx’s influence removed, it looks like there is roughly a 4% drop in average completion for each successive archstone boss. In order to face the False King players must first slay every other demon and archdemon in the game, so it is interesting the drop stays consistent there. Most players who made it far enough to slay their first archdemon then went on to slay the rest.\n\nUmbassa.\nAbout one quarter of Demon’s Souls players persisted to the end of the game. But three quarters did not. Assuming most players at least attempted each location, then averaging by location can give an imperfect idea of their overall difficulty for players during their first playthrough.\n\n\n# Calculate the average completion rate by location, arranged from \"easiest\" to\n# \"hardest\"\ndemons_souls %>%\n  group_by(location) %>%\n  summarise(average_completed = mean(percent_completed)) %>%\n  arrange(desc(average_completed))\n\n\n#> # A tibble: 5 x 2\n#>   location             average_completed\n#>   <fct>                            <dbl>\n#> 1 Boletarian Palace                 41.0\n#> 2 Stonefang Tunnel                  37.4\n#> 3 Shrine of Storms                  31  \n#> 4 Tower of Latria                   30.7\n#> 5 Valley of Defilement              28.8\n\nIt looks like there are two clusters here, an easier one with the Boletarian Palace and Stonefang Tunnel, and a harder one with Shrine of Storms, Tower of Latria, and the Valley of Defilement. I finished my first playthrough of the game in 2012, so I only have distant memories to reflect on, but this ranking looks sound to me. For experienced players I think this ranking is less relevant. Once you’re experienced most of the variability in difficulty comes down to the character build you choose.\nVisualize\n\n\n# Define aliases for plot fonts and colours\noptimus <- \"OptimusPrinceps\"\noptimus_b <- \"OptimusPrincepsSemiBold\"\nyellow <- \"#ffaf24\" #  #fec056\n\n\n\nThe plot I want to make is inspired by this Tidy Tuesday plot by Georgios Karamanis. I used Georgios’ code as a starting point, then modified it to get the behaviour and result I wanted.\nThe centrepiece of the plot is the coloured text that shows the percent of Demon’s Souls players who have completed a given boss in yellow and who have not in red. This effect is achieved by applying a rectangular filter over the text that only allows the portion of the text within the filter’s borders to be shown. Doing this once for yellow text and once for red text allows the full string to appear, with the ratio of colours within a boss’s name reflecting the percent of players that have completed it. A few calculations are needed in order for the ratios to be accurate, and for the text to look aesthetically pleasing.\n\n\ndemons_souls_plot <- demons_souls %>%\n  mutate(\n    # Percentages need to be in decimal form for the calculations and plotting\n    # to work properly\n    percent_completed = percent_completed/100,\n    boss = fct_reorder(toupper(boss), percent_completed),\n    # In order to justify text to the same width, a ratio of how many times\n    # each string would fit into the widest string needs to be calculated. This\n    # can then be multiplied by an arbitrary value to determine the final size\n    # for each string of text.\n    str_width = strwidth(boss, family = optimus_b, units = \"inches\") * 25.4, # in millimetres\n    str_ratio = max(str_width)/str_width,\n    text_size = 4.9 * str_ratio,\n    # The division here is arbitrary, its effect is reflected in the scale of the\n    # y-axis\n    tile_height = text_size / 10\n  ) %>%\n  # Bosses will appear from top to bottom based on completion ratios. The\n  # calculation here accounts for the differences in text size for each string.\n  arrange(percent_completed) %>%\n  mutate(y = cumsum(lag(tile_height/2, default = 0) + tile_height/2))\n\n\n\nNow the plot can be constructed. The final code for the plot is roughly 100 lines long, so I’ve hidden it in the section below. However, there are a few parts of the code I want to highlight before showing the final plot.\n\n\n# The trick for geom spacing is to set the size of the plot from the start\nfile <- tempfile(fileext = '.png')\nragg::agg_png(file, width = 4, height = 5.5, res = 300, units = \"in\")\n\nggplot(demons_souls_plot) +\n  # Make it easier to see where 50% is using a vertical line. geom_segment() is\n  # used here instead of geom_vline() because the latter goes up into the title\n  # text. An empty data frame is supplied so that only one copy of the geom is\n  # drawn.\n  geom_segment(aes(\n    x = 0,\n    xend = 0,\n    y = 10.9,\n    yend = 0,\n    size = 0.6),\n    data = data.frame(),\n    alpha = 0.3,\n    colour = \"grey\",\n    lineend = \"round\",\n    linetype = \"twodash\"\n  ) +\n  scale_alpha_identity() +\n  \n  # Set bounding box for yellow portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = -0.5,\n      xmax = -0.5 + ((percent_completed)),\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"demon_vanquished\"\n  ) +\n  # Only show the portion of yellow centrepiece text located within the\n  # bounding box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = yellow,\n    family = optimus_b),\n    bg_layer = \"demon_vanquished\",\n    blend_type = \"in\"\n  ) +\n  # Set bounding box for red portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = 0.5 - ((1 - percent_completed)),\n      xmax = 0.5,\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"you_died\"\n  ) +\n  # Only show the portion of red centrepiece text located within the bounding\n  # box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = \"red\",\n    family = optimus_b),\n    bg_layer = \"you_died\",\n    blend_type = \"in\"\n  ) +\n  \n  # Draw \"axis\" for Demon Vanquished\n  annotate(\n    \"text\",\n    x = -0.65,\n    y = 7.75,\n    label = \"demon vanquished\",\n    angle = 90,\n    size = 5,\n    family = optimus,\n    colour = yellow\n  ) +\n  geom_segment(aes(\n    x = -0.645,\n    xend = -0.645,\n    y = 10.05,\n    yend = 10.45),\n    lineend = \"round\",\n    colour = yellow,\n    size = 0.3,\n    arrow = arrow(angle = 45, length = unit(1, \"mm\"), type = \"open\")\n  ) +\n  # Draw \"axis\" for You Died\n  annotate(\n    \"text\",\n    x = 0.65,\n    y = 4.65,\n    label = \"you died\",\n    angle = 270,\n    size = 5,\n    family = optimus,\n    colour = \"red\"\n  ) +\n  geom_segment(aes(\n    x = 0.645,\n    xend = 0.645,\n    y = 3.51,\n    yend = 3.01),\n    lineend = \"round\",\n    colour = \"red\",\n    size = 0.3,\n    arrow = arrow(angle = 45, length = unit(1, \"mm\"), type = \"open\")\n  ) +\n  \n  # Draw a title surrounded by line decorations at the top of the panel\n  geom_segment(aes(\n    x = -0.75,\n    xend = 0.75,\n    y = 13.2,\n    yend = 13.2,\n    size = 0.3),\n    lineend = \"round\",\n    colour = \"grey\"\n  ) +\n  annotate(\n    \"text\",\n    x = 0,\n    y = 12.325,\n    size = 7,\n    family = optimus_b,\n    colour = \"white\",\n    lineheight = 0.75,\n    label = \"DEMON’S SOULS\\nBOSS COMPLETION\"\n  ) +\n  geom_segment(aes(\n    x = -0.025,\n    xend = -0.75,\n    y = 11.4,\n    yend = 11.4,\n    size = 0.3),\n    lineend = \"round\",\n    colour = \"grey\"\n  ) +\n  geom_segment(aes(\n    x = 0.025,\n    xend = 0.75,\n    y = 11.4,\n    yend = 11.4,\n    size = 0.3),\n    lineend = \"round\",\n    colour = \"grey\"\n  ) +\n  annotate(\n    \"point\",\n    x  = 0,\n    y = 11.4,\n    colour = \"grey\",\n    shape = 5,\n    size = 2,\n    stroke = 0.6\n  ) +\n  annotate(\n    \"point\",\n    x  = 0,\n    y = 11.4,\n    colour = \"grey\",\n    shape = 5,\n    size = 0.75\n  ) +\n  \n  # Draw plot caption\n  annotate(\n    \"text\",\n    x = 1,\n    y = 10.33,\n    angle = 270,\n    hjust = 0,\n    size = 3,\n    alpha = 0.3,\n    label = \"SOURCE: PLAYSTATION NETWORK | GRAPHIC: MICHAEL MCCARTHY\",\n    family = optimus,\n    color = \"grey\"\n  ) +\n  \n  # Make sure the text size calculated for each string is used so that strings\n  # are justified\n  scale_size_identity() +\n  # Take axis limits exactly from data so there's no spacing around the panel,\n  # allow drawing outside of the panel for annotations, and set the axis limits\n  # to match the limits of the text.\n  coord_cartesian(expand = FALSE, clip = \"off\", xlim = c(-0.5, 0.5)) +\n  # Specify the panel size manually. This makes it easier to position plot\n  # elements with absolute positions.\n  ggh4x::force_panelsizes(rows = unit(5, \"in\"), # height\n                          cols = unit(1.8, \"in\")) + # width\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = unit(c(0.5, 4, 0.5, 4), \"in\"),\n    plot.background = element_rect(fill = \"black\", color = NA))\n\ninvisible(dev.off())\n\n# Apply a mask texture to the final image to mimic the style of the Demon's\n# Souls logo in the plot title\nmask <- image_read(\n  here(\"_posts\", \"2021-06-15_demons-souls\", \"images\", \"texture.png\")\n  ) %>%\n  image_transparent(\"white\") %>%\n  image_threshold(\"black\", \"90%\")\n\nfinal_plot <- image_composite(image_read(file), mask, operator = \"Over\")\n\n\n\nFirst, the code behind the coloured centrepiece text. It uses ggfx::as_reference() and ggfx::with_blend() to selectively apply a filter over portions of the text, as I discussed earlier. The boundaries of the filter are defined by the ggplot2 geom inside of ggfx::as_reference(), then ggfx::with_blend() applies a filter specified by blend_type to the ggplot2 geom inside of it. By duplicating this process twice—once for yellow text and again for red text—but with different filter boundaries based on the percent completed and not completed, the entire boss name is displayed with accurate colour fills.\n\n\n  # Set bounding box for yellow portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = -0.5,\n      xmax = -0.5 + ((percent_completed)),\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"demon_vanquished\"\n  ) +\n  # Only show the portion of yellow centrepiece text located within the\n  # bounding box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = yellow,\n    family = optimus_b),\n    bg_layer = \"demon_vanquished\",\n    blend_type = \"in\"\n  ) +\n   # Set bounding box for red portion of centrepiece text\n  as_reference(\n    geom_rect(aes(\n      xmin = 0.5 - ((1 - percent_completed)),\n      xmax = 0.5,\n      ymin = y - (tile_height * 0.5),\n      ymax = y + (tile_height * 0.5)\n    )), \n    id = \"you_died\"\n  ) +\n  # Only show the portion of red centrepiece text located within the bounding\n  # box\n  with_blend(\n    geom_text(aes(\n      x = 0,\n      y = y,\n      label = boss,\n      size = text_size\n    ),\n    colour = \"red\",\n    family = optimus_b),\n    bg_layer = \"you_died\",\n    blend_type = \"in\"\n  )\n\n\n\nSecond, the code behind the distressed, broken style of the title text. This one is actually quite simple. It uses magick::image_composite() to apply a texture mask I made in Krita over the composed plot. The mask has a transparent background with black lines located over the space where the plot title is. Both the composed plot and mask images have the same dimensions, so when they’re composed together the effect is applied exactly where I want it.\n\n\nimage_composite(plot, mask, operator = \"Over\")\n\n\n\nFinally, I just wanted to note that the decorative lines around the plot’s title text are actually made up of ggplot2 geoms. I used two ggplot2::geom_point() geoms with different sizes to create the diamond on the bottom line.\nFinal Graphic\n\n\n\nComments\nData Source\nDownload the data used in this article.\nSession Info\n\n#> R version 4.0.3 (2020-10-10)\n#> Platform: x86_64-apple-darwin17.0 (64-bit)\n#> Running under: macOS Mojave 10.14.6\n#> \n#> Matrix products: default\n#> BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib\n#> LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib\n#> \n#> locale:\n#> [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8\n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices utils     datasets  methods  \n#> [7] base     \n#> \n#> other attached packages:\n#>  [1] magick_2.7.2    ggfx_1.0.0      forcats_0.5.1   stringr_1.4.0  \n#>  [5] dplyr_1.0.4     purrr_0.3.4     readr_1.4.0     tidyr_1.1.2    \n#>  [9] tibble_3.1.2    ggplot2_3.3.3   tidyverse_1.3.0 metathis_1.0.3 \n#> [13] here_1.0.1     \n#> \n#> loaded via a namespace (and not attached):\n#>  [1] Rcpp_1.0.6        lubridate_1.7.9.2 png_0.1-7        \n#>  [4] assertthat_0.2.1  rprojroot_2.0.2   digest_0.6.27    \n#>  [7] utf8_1.2.1        R6_2.5.0          cellranger_1.1.0 \n#> [10] backports_1.2.1   reprex_1.0.0      evaluate_0.14    \n#> [13] httr_1.4.2        highr_0.8         pillar_1.6.1     \n#> [16] rlang_0.4.11      readxl_1.3.1      rstudioapi_0.13  \n#> [19] jquerylib_0.1.3   rmarkdown_2.7     labeling_0.4.2   \n#> [22] textshaping_0.3.4 munsell_0.5.0     broom_0.7.4      \n#> [25] compiler_4.0.3    modelr_0.1.8      xfun_0.23        \n#> [28] systemfonts_1.0.2 pkgconfig_2.0.3   htmltools_0.5.1.1\n#> [31] downlit_0.2.1     tidyselect_1.1.0  ggh4x_0.1.2.1    \n#> [34] fansi_0.5.0       crayon_1.4.1      dbplyr_2.1.0     \n#> [37] withr_2.4.2       grid_4.0.3        jsonlite_1.7.2   \n#> [40] gtable_0.3.0      lifecycle_1.0.0   DBI_1.1.1        \n#> [43] magrittr_2.0.1    scales_1.1.1      cli_2.5.0        \n#> [46] stringi_1.6.2     farver_2.1.0      fs_1.5.0         \n#> [49] xml2_1.3.2        bslib_0.2.4       ragg_1.1.2       \n#> [52] ellipsis_0.3.2    generics_0.1.0    vctrs_0.3.8      \n#> [55] distill_1.2       tools_4.0.3       glue_1.4.2       \n#> [58] hms_1.0.0         yaml_2.2.1        colorspace_2.0-1 \n#> [61] rvest_0.3.6       knitr_1.31        haven_2.3.1      \n#> [64] sass_0.3.1\n\nFair Dealing\nAny of the trademarks, service marks, collective marks, design rights or similar rights that are mentioned, used, or cited in this article are the property of their respective owners. They are used here as fair dealing for the purpose of education in accordance with section 29 of the Copyright Act and do not infringe copyright.\n\n\n\n",
    "preview": "posts/2021-06-15_demons-souls/demons-souls_files/figure-html5/final-plot-1.png",
    "last_modified": "2021-06-15T16:24:44-06:00",
    "input_file": {},
    "preview_width": 1200,
    "preview_height": 1650
  }
]
